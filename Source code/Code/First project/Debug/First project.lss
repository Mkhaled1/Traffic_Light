
First project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c1c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000c1c  00000cb0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800062  00800062  00000cb2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000cb2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000ce4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  00000d20  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000014c8  00000000  00000000  00000e58  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009e8  00000000  00000000  00002320  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000cd9  00000000  00000000  00002d08  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000026c  00000000  00000000  000039e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005e0  00000000  00000000  00003c50  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f2c  00000000  00000000  00004230  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  0000515c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 a0 01 	jmp	0x340	; 0x340 <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e1       	ldi	r30, 0x1C	; 28
  68:	fc e0       	ldi	r31, 0x0C	; 12
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a7 36       	cpi	r26, 0x67	; 103
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 77 01 	call	0x2ee	; 0x2ee <main>
  8a:	0c 94 0c 06 	jmp	0xc18	; 0xc18 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <BUTTON_Init>:
 * @details calls the DIO_init passing the dirction value as IN to set provided pin in the port as input
 * @param buttonPort contains in which port the pin will be intialized as an input
 * @param buttonPin contains which pin will be intialized as an input
 * @return Status returns Not_Ok if the intiailization fails, ekse returns Ok.
 */
Status BUTTON_Init(uint8_t buttonPort, uint8_t buttonPin){
  92:	98 2f       	mov	r25, r24
  94:	86 2f       	mov	r24, r22
	
	//Initialize the return value
	Status ret = Not_ok;
	//calls the DIO to initialize the pin as an input
	
	ret = DIO_init(buttonPin, buttonPort, IN);
  96:	40 e0       	ldi	r20, 0x00	; 0
  98:	69 2f       	mov	r22, r25
  9a:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <DIO_init>
	return ret;
}
  9e:	08 95       	ret

000000a0 <LED_Init>:
 * @param ledPort Port containing the PIN that will be set as output
 * @param ledPin PIN to be set as output
 * @see DIO_init()
 * @return Status NOT_OK if initialization failed, return OK otherwise 
 */
Status LED_Init(uint8_t ledPort, uint8_t ledPin){
  a0:	98 2f       	mov	r25, r24
  a2:	86 2f       	mov	r24, r22
	
	Status ret = Not_ok;
	
	//Initialize the pin as an input in the DIO driver
	ret = DIO_init(ledPin,ledPort, OUT);
  a4:	41 e0       	ldi	r20, 0x01	; 1
  a6:	69 2f       	mov	r22, r25
  a8:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <DIO_init>
	return ret;
}
  ac:	08 95       	ret

000000ae <LED_On>:
 * @param ledPort Port containing the PIN that will be set to HIGH
 * @param ledPin PIN to be set as output
 * @see DIO_Write()
 * @return Status return if turning on the LED fails, return OK otherwise
 */
Status LED_On(uint8_t ledPort, uint8_t ledPin){
  ae:	98 2f       	mov	r25, r24
  b0:	86 2f       	mov	r24, r22
	
	Status ret = Not_ok;
	//raise the PIN connect to the LED to high in the DIO driver
	ret = DIO_Write(ledPin,ledPort, HIGH);
  b2:	41 e0       	ldi	r20, 0x01	; 1
  b4:	69 2f       	mov	r22, r25
  b6:	0e 94 8d 02 	call	0x51a	; 0x51a <DIO_Write>
	return ret;
}
  ba:	08 95       	ret

000000bc <LED_Off>:
 * @param ledPort Port containing the PIN that will be set to low
 * @param ledPin PIN to be set as output
 * @see DIO_Write()
 * @return Status return if  turning off the LED fails, return OK otherwise
 */
Status LED_Off(uint8_t ledPort, uint8_t ledPin){
  bc:	98 2f       	mov	r25, r24
  be:	86 2f       	mov	r24, r22
	
	Status ret = Not_ok;
	//put the PIN connect to the LED to low in the DIO driver
	DIO_Write(ledPin,ledPort, LOW);
  c0:	40 e0       	ldi	r20, 0x00	; 0
  c2:	69 2f       	mov	r22, r25
  c4:	0e 94 8d 02 	call	0x51a	; 0x51a <DIO_Write>
	return ret;
}
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	08 95       	ret

000000cc <LED_toggle>:
 * @param ledPort Port containing the PIN that will be flipped
 * @param ledPin PIN to be set as output
 * @see DIO_Toggle()
 * @return Status return if  toggling the LED fails, return OK otherwise
 */
Status LED_toggle(uint8_t ledPort, uint8_t ledPin){
  cc:	98 2f       	mov	r25, r24
  ce:	86 2f       	mov	r24, r22
	
	Status ret = Not_ok;
	//Toggle the PIN status connect to the LED 
	DIO_Toggle(ledPin,ledPort);
  d0:	69 2f       	mov	r22, r25
  d2:	0e 94 41 03 	call	0x682	; 0x682 <DIO_Toggle>
  d6:	08 95       	ret

000000d8 <LEDS_OFF>:
 */
Status LEDS_OFF(){
	
	//Turn off all leds
	Status ret = Ok;
	ret = LED_Off(Port_B,PEDES_LED_GREEN);
  d8:	60 e0       	ldi	r22, 0x00	; 0
  da:	82 e4       	ldi	r24, 0x42	; 66
  dc:	0e 94 5e 00 	call	0xbc	; 0xbc <LED_Off>
	ret = LED_Off(Port_B,PEDES_LED_YELLOW);
  e0:	61 e0       	ldi	r22, 0x01	; 1
  e2:	82 e4       	ldi	r24, 0x42	; 66
  e4:	0e 94 5e 00 	call	0xbc	; 0xbc <LED_Off>
	ret = LED_Off(Port_B,PEDES_LED_RED);
  e8:	62 e0       	ldi	r22, 0x02	; 2
  ea:	82 e4       	ldi	r24, 0x42	; 66
  ec:	0e 94 5e 00 	call	0xbc	; 0xbc <LED_Off>
	ret = LED_Off(Port_A,CAR_LED_GREEN);
  f0:	60 e0       	ldi	r22, 0x00	; 0
  f2:	81 e4       	ldi	r24, 0x41	; 65
  f4:	0e 94 5e 00 	call	0xbc	; 0xbc <LED_Off>
	ret = LED_Off(Port_A,CAR_LED_YELLOW);
  f8:	61 e0       	ldi	r22, 0x01	; 1
  fa:	81 e4       	ldi	r24, 0x41	; 65
  fc:	0e 94 5e 00 	call	0xbc	; 0xbc <LED_Off>
	ret = LED_Off(Port_A,CAR_LED_RED);		
 100:	62 e0       	ldi	r22, 0x02	; 2
 102:	81 e4       	ldi	r24, 0x41	; 65
 104:	0e 94 5e 00 	call	0xbc	; 0xbc <LED_Off>
	return ret;
}
 108:	08 95       	ret

0000010a <Blink_CAR_YELLOW>:
/**
 * @brief blink the car yellow LED for 5 seconds
 * @details calls LED toggle passing the car yellow LED parameters then delay 1 ms in a loop of 5 iterations
 * @return Status returns not ok if failure occurs during toggling or delay, otherwise return Ok
 */
Status Blink_CAR_YELLOW(){
 10a:	cf 93       	push	r28
 10c:	df 93       	push	r29
	
	// Blink the car yellow LED
	//it is designed to blink within 5 seconds 
	Status ret = Ok;
	for(int i = 0; i< (ON_DELAY/TOGGLE_DELAY); i++){
 10e:	c0 e0       	ldi	r28, 0x00	; 0
 110:	d0 e0       	ldi	r29, 0x00	; 0
 */
Status Blink_CAR_YELLOW(){
	
	// Blink the car yellow LED
	//it is designed to blink within 5 seconds 
	Status ret = Ok;
 112:	80 e0       	ldi	r24, 0x00	; 0
	for(int i = 0; i< (ON_DELAY/TOGGLE_DELAY); i++){
 114:	09 c0       	rjmp	.+18     	; 0x128 <Blink_CAR_YELLOW+0x1e>
		ret = LED_toggle(Port_A,CAR_LED_YELLOW);
 116:	61 e0       	ldi	r22, 0x01	; 1
 118:	81 e4       	ldi	r24, 0x41	; 65
 11a:	0e 94 66 00 	call	0xcc	; 0xcc <LED_toggle>
		ret = delay_ms_0(TOGGLE_DELAY);
 11e:	88 ee       	ldi	r24, 0xE8	; 232
 120:	93 e0       	ldi	r25, 0x03	; 3
 122:	0e 94 ff 03 	call	0x7fe	; 0x7fe <delay_ms_0>
Status Blink_CAR_YELLOW(){
	
	// Blink the car yellow LED
	//it is designed to blink within 5 seconds 
	Status ret = Ok;
	for(int i = 0; i< (ON_DELAY/TOGGLE_DELAY); i++){
 126:	21 96       	adiw	r28, 0x01	; 1
 128:	c5 30       	cpi	r28, 0x05	; 5
 12a:	d1 05       	cpc	r29, r1
 12c:	a4 f3       	brlt	.-24     	; 0x116 <Blink_CAR_YELLOW+0xc>
		ret = LED_toggle(Port_A,CAR_LED_YELLOW);
		ret = delay_ms_0(TOGGLE_DELAY);
	}
	return ret;
}
 12e:	df 91       	pop	r29
 130:	cf 91       	pop	r28
 132:	08 95       	ret

00000134 <Blink_Both_YELLOW>:
/**
 * @brief blink the both  yellow LEDs for 5 seconds
 * @details calls LED toggle passing the car yellow LED parameters then delay 1 ms in a loop of 5 iterations
 * @return Status returns not ok if failure occurs during toggling or delay, otherwise return Ok
 */
Status Blink_Both_YELLOW(){
 134:	cf 93       	push	r28
 136:	df 93       	push	r29
	
	// Blink the both yellow LEDs
	//it is designed to blink within 5 seconds
	Status ret = Ok;
	for(int i = 0; i< (ON_DELAY/TOGGLE_DELAY); i++){
 138:	c0 e0       	ldi	r28, 0x00	; 0
 13a:	d0 e0       	ldi	r29, 0x00	; 0
 13c:	0d c0       	rjmp	.+26     	; 0x158 <Blink_Both_YELLOW+0x24>
		LED_toggle(Port_A,CAR_LED_YELLOW);
 13e:	61 e0       	ldi	r22, 0x01	; 1
 140:	81 e4       	ldi	r24, 0x41	; 65
 142:	0e 94 66 00 	call	0xcc	; 0xcc <LED_toggle>
		LED_toggle(Port_B,PEDES_LED_YELLOW);
 146:	61 e0       	ldi	r22, 0x01	; 1
 148:	82 e4       	ldi	r24, 0x42	; 66
 14a:	0e 94 66 00 	call	0xcc	; 0xcc <LED_toggle>
		delay_ms_0(TOGGLE_DELAY);
 14e:	88 ee       	ldi	r24, 0xE8	; 232
 150:	93 e0       	ldi	r25, 0x03	; 3
 152:	0e 94 ff 03 	call	0x7fe	; 0x7fe <delay_ms_0>
Status Blink_Both_YELLOW(){
	
	// Blink the both yellow LEDs
	//it is designed to blink within 5 seconds
	Status ret = Ok;
	for(int i = 0; i< (ON_DELAY/TOGGLE_DELAY); i++){
 156:	21 96       	adiw	r28, 0x01	; 1
 158:	c5 30       	cpi	r28, 0x05	; 5
 15a:	d1 05       	cpc	r29, r1
 15c:	84 f3       	brlt	.-32     	; 0x13e <Blink_Both_YELLOW+0xa>
		LED_toggle(Port_A,CAR_LED_YELLOW);
		LED_toggle(Port_B,PEDES_LED_YELLOW);
		delay_ms_0(TOGGLE_DELAY);
	}
	return ret;
}
 15e:	80 e0       	ldi	r24, 0x00	; 0
 160:	df 91       	pop	r29
 162:	cf 91       	pop	r28
 164:	08 95       	ret

00000166 <AppStart>:
	
    while (1){
		// initialize the variable holding the return variables from the called functions
		Status ret;
		//switch case to determine in which state the program is (Normal, Pedestrian)
		switch(currentMode){
 166:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <currentMode>
 16a:	88 23       	and	r24, r24
 16c:	21 f0       	breq	.+8      	; 0x176 <AppStart+0x10>
 16e:	81 30       	cpi	r24, 0x01	; 1
 170:	09 f4       	brne	.+2      	; 0x174 <AppStart+0xe>
 172:	53 c0       	rjmp	.+166    	; 0x21a <AppStart+0xb4>
 174:	f8 cf       	rjmp	.-16     	; 0x166 <AppStart>
			// In case of Normal mode the sequence will go as follows
			//car Green LED is on for 5 seconds == ==> car Yellow LED will toggle for 5 seconds ==> car Red LED will be on for 5 seconds
			//==> car Yellow LED will toggle for 5 seconds ==> car Green LED is on for 5 seconds 
			case Normal:
				switch(current_carLed_Mode)
 176:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <current_carLed_Mode>
 17a:	81 30       	cpi	r24, 0x01	; 1
 17c:	d9 f0       	breq	.+54     	; 0x1b4 <AppStart+0x4e>
 17e:	18 f0       	brcs	.+6      	; 0x186 <AppStart+0x20>
 180:	82 30       	cpi	r24, 0x02	; 2
 182:	91 f1       	breq	.+100    	; 0x1e8 <AppStart+0x82>
 184:	f0 cf       	rjmp	.-32     	; 0x166 <AppStart>
				{
				case Green:
					//turn of all LEDs
					ret = LEDS_OFF();
 186:	0e 94 6c 00 	call	0xd8	; 0xd8 <LEDS_OFF>
					// Turn the CAR gree LED on 
					ret= LED_On(Port_A,CAR_LED_GREEN);
 18a:	60 e0       	ldi	r22, 0x00	; 0
 18c:	81 e4       	ldi	r24, 0x41	; 65
 18e:	0e 94 57 00 	call	0xae	; 0xae <LED_On>
					// Delay for 5 seconds
					delay_ms_0(ON_DELAY);
 192:	88 e8       	ldi	r24, 0x88	; 136
 194:	93 e1       	ldi	r25, 0x13	; 19
 196:	0e 94 ff 03 	call	0x7fe	; 0x7fe <delay_ms_0>
					// Check if interrupt occur with in the delay
					//this determines in which carLed_Mode are we
					//in case no interrupt occurs the program will enter the pedestrian state without change the carLed_Mode
					if (Flag == TRUE){
 19a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 19e:	8a 3a       	cpi	r24, 0xAA	; 170
 1a0:	19 f4       	brne	.+6      	; 0x1a8 <AppStart+0x42>
					current_carLed_Mode = Green;
 1a2:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <current_carLed_Mode>
 1a6:	df cf       	rjmp	.-66     	; 0x166 <AppStart>
					}
					else {
					current_carLed_Mode = Yellow;
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <current_carLed_Mode>
					//store the previous mode
					previous_carLed_Mode = Green;
 1ae:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
 1b2:	d9 cf       	rjmp	.-78     	; 0x166 <AppStart>
					}
				break;
				// In case the program's carLed_Mode is in Yellow state, the yellow LED will toggle for 5 seconds
				case Yellow:
					LEDS_OFF();
 1b4:	0e 94 6c 00 	call	0xd8	; 0xd8 <LEDS_OFF>
					ret = Blink_CAR_YELLOW();
 1b8:	0e 94 85 00 	call	0x10a	; 0x10a <Blink_CAR_YELLOW>
					if (Flag == TRUE){
 1bc:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1c0:	8a 3a       	cpi	r24, 0xAA	; 170
 1c2:	21 f4       	brne	.+8      	; 0x1cc <AppStart+0x66>
						current_carLed_Mode = Yellow;
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <current_carLed_Mode>
				break;
				
				default:
					break;
				}	
			break;
 1ca:	cd cf       	rjmp	.-102    	; 0x166 <AppStart>
					ret = Blink_CAR_YELLOW();
					if (Flag == TRUE){
						current_carLed_Mode = Yellow;
					}
					else {
						if(previous_carLed_Mode == Green)
 1cc:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 1d0:	81 11       	cpse	r24, r1
 1d2:	04 c0       	rjmp	.+8      	; 0x1dc <AppStart+0x76>
							current_carLed_Mode = Red;
 1d4:	82 e0       	ldi	r24, 0x02	; 2
 1d6:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <current_carLed_Mode>
 1da:	c5 cf       	rjmp	.-118    	; 0x166 <AppStart>
						else{
						current_carLed_Mode = Green;
 1dc:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <current_carLed_Mode>
						previous_carLed_Mode = Yellow;
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
 1e6:	bf cf       	rjmp	.-130    	; 0x166 <AppStart>
						}
				break;
				// In case the program's carLed_Mode is in Red state, the Red LED will be on for 5 seconds
				case Red:
					LEDS_OFF();
 1e8:	0e 94 6c 00 	call	0xd8	; 0xd8 <LEDS_OFF>
					ret= LED_On(Port_A,CAR_LED_RED);
 1ec:	62 e0       	ldi	r22, 0x02	; 2
 1ee:	81 e4       	ldi	r24, 0x41	; 65
 1f0:	0e 94 57 00 	call	0xae	; 0xae <LED_On>
					delay_ms_0(ON_DELAY);
 1f4:	88 e8       	ldi	r24, 0x88	; 136
 1f6:	93 e1       	ldi	r25, 0x13	; 19
 1f8:	0e 94 ff 03 	call	0x7fe	; 0x7fe <delay_ms_0>
					
					if (Flag == TRUE){
 1fc:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 200:	8a 3a       	cpi	r24, 0xAA	; 170
 202:	21 f4       	brne	.+8      	; 0x20c <AppStart+0xa6>
						current_carLed_Mode = Red;
 204:	82 e0       	ldi	r24, 0x02	; 2
 206:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <current_carLed_Mode>
 20a:	ad cf       	rjmp	.-166    	; 0x166 <AppStart>
					}
					else {
					current_carLed_Mode = Yellow;
 20c:	81 e0       	ldi	r24, 0x01	; 1
 20e:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <current_carLed_Mode>
					previous_carLed_Mode = Red;
 212:	82 e0       	ldi	r24, 0x02	; 2
 214:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
 218:	a6 cf       	rjmp	.-180    	; 0x166 <AppStart>
			
			
			// In case of Pedestrian mode the sequence depends when the interrupt occurs
			case Pedestrian:
			//setting the flag to true to remove the effect of the button while in pedestrain mode
				Flag = TRUE;
 21a:	8a ea       	ldi	r24, 0xAA	; 170
 21c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
				
				switch(current_carLed_Mode)
 220:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <current_carLed_Mode>
 224:	81 30       	cpi	r24, 0x01	; 1
 226:	49 f1       	breq	.+82     	; 0x27a <AppStart+0x114>
 228:	20 f0       	brcs	.+8      	; 0x232 <AppStart+0xcc>
 22a:	82 30       	cpi	r24, 0x02	; 2
 22c:	09 f4       	brne	.+2      	; 0x230 <AppStart+0xca>
 22e:	4a c0       	rjmp	.+148    	; 0x2c4 <AppStart+0x15e>
 230:	9a cf       	rjmp	.-204    	; 0x166 <AppStart>
					// In case the current_carLed_Mode is Green it has to be checked if it is the first state in the pedestrian mode
					// If it is not the first state the occurs after the interrupt the current mode will return back to normal
					// current_carLed_Mode will be equal Yellow
					// previous_carLed_Mode will be equal Green
					case Green:
						LEDS_OFF();
 232:	0e 94 6c 00 	call	0xd8	; 0xd8 <LEDS_OFF>
						ret= LED_On(Port_A,CAR_LED_GREEN);
 236:	60 e0       	ldi	r22, 0x00	; 0
 238:	81 e4       	ldi	r24, 0x41	; 65
 23a:	0e 94 57 00 	call	0xae	; 0xae <LED_On>
						ret= LED_On(Port_B,PEDES_LED_RED);
 23e:	62 e0       	ldi	r22, 0x02	; 2
 240:	82 e4       	ldi	r24, 0x42	; 66
 242:	0e 94 57 00 	call	0xae	; 0xae <LED_On>
						delay_ms_0(ON_DELAY);
 246:	88 e8       	ldi	r24, 0x88	; 136
 248:	93 e1       	ldi	r25, 0x13	; 19
 24a:	0e 94 ff 03 	call	0x7fe	; 0x7fe <delay_ms_0>
						if(FirstState == Green){
 24e:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <FirstState>
 252:	81 11       	cpse	r24, r1
 254:	07 c0       	rjmp	.+14     	; 0x264 <AppStart+0xfe>
							current_carLed_Mode = Yellow;
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <current_carLed_Mode>
							// set first state to NON to be able to return back to the normal mode
							FirstState = NON;
 25c:	83 e0       	ldi	r24, 0x03	; 3
 25e:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <FirstState>
 262:	08 c0       	rjmp	.+16     	; 0x274 <AppStart+0x10e>
						}
						else {
							current_carLed_Mode = Yellow;
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <current_carLed_Mode>
							currentMode = Normal;
 26a:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <currentMode>
							Flag = FALSE;
 26e:	85 e5       	ldi	r24, 0x55	; 85
 270:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
						}
						previous_carLed_Mode = Green;
 274:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
					break;
 278:	76 cf       	rjmp	.-276    	; 0x166 <AppStart>
					// In case the current_carLed_Mode is Yellow it has to be checked if it is the first state in the pedestrian mode
					// If it is not the first state the occurs after the interrupt the current mode will return back to normal
					// current_carLed_Mode will determined based on the previous_carLed_Mode
					// after that previous_carLed_Mode will be equal Yellow
					case Yellow:
						LEDS_OFF();
 27a:	0e 94 6c 00 	call	0xd8	; 0xd8 <LEDS_OFF>
						if(FirstState == Yellow){
 27e:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <FirstState>
 282:	81 30       	cpi	r24, 0x01	; 1
 284:	59 f4       	brne	.+22     	; 0x29c <AppStart+0x136>
							current_carLed_Mode = Red;
 286:	82 e0       	ldi	r24, 0x02	; 2
 288:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <current_carLed_Mode>
							// set first state to NON to be able to return back to the normal mode
							FirstState = NON;
 28c:	83 e0       	ldi	r24, 0x03	; 3
 28e:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <FirstState>
							ret= LED_Off(Port_B,PEDES_LED_RED);
 292:	62 e0       	ldi	r22, 0x02	; 2
 294:	82 e4       	ldi	r24, 0x42	; 66
 296:	0e 94 5e 00 	call	0xbc	; 0xbc <LED_Off>
 29a:	0a c0       	rjmp	.+20     	; 0x2b0 <AppStart+0x14a>
						}
						else{
						if(previous_carLed_Mode == Green)
 29c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 2a0:	81 11       	cpse	r24, r1
 2a2:	04 c0       	rjmp	.+8      	; 0x2ac <AppStart+0x146>
							current_carLed_Mode = Red;
 2a4:	82 e0       	ldi	r24, 0x02	; 2
 2a6:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <current_carLed_Mode>
 2aa:	02 c0       	rjmp	.+4      	; 0x2b0 <AppStart+0x14a>
						else
							current_carLed_Mode = Green;
 2ac:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <current_carLed_Mode>
						
						}
						ret= LED_Off(Port_B,PEDES_LED_RED);
 2b0:	62 e0       	ldi	r22, 0x02	; 2
 2b2:	82 e4       	ldi	r24, 0x42	; 66
 2b4:	0e 94 5e 00 	call	0xbc	; 0xbc <LED_Off>
						ret = Blink_Both_YELLOW();
 2b8:	0e 94 9a 00 	call	0x134	; 0x134 <Blink_Both_YELLOW>
						previous_carLed_Mode = Yellow;
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
					break;
 2c2:	51 cf       	rjmp	.-350    	; 0x166 <AppStart>
					// In case the current_carLed_Mode is Red it has to be checked if it is the first state in the pedestrian mode
					// If it is not the first state the occurs after the interrupt the current mode will return back to normal
					// current_carLed_Mode will be equal Yellow
					// after that previous_carLed_Mode will be equal Red
					case Red:
						LEDS_OFF();
 2c4:	0e 94 6c 00 	call	0xd8	; 0xd8 <LEDS_OFF>
						ret= LED_On(Port_B,PEDES_LED_GREEN);
 2c8:	60 e0       	ldi	r22, 0x00	; 0
 2ca:	82 e4       	ldi	r24, 0x42	; 66
 2cc:	0e 94 57 00 	call	0xae	; 0xae <LED_On>
						ret= LED_On(Port_A,CAR_LED_RED);
 2d0:	62 e0       	ldi	r22, 0x02	; 2
 2d2:	81 e4       	ldi	r24, 0x41	; 65
 2d4:	0e 94 57 00 	call	0xae	; 0xae <LED_On>
						delay_ms_0(ON_DELAY);
 2d8:	88 e8       	ldi	r24, 0x88	; 136
 2da:	93 e1       	ldi	r25, 0x13	; 19
 2dc:	0e 94 ff 03 	call	0x7fe	; 0x7fe <delay_ms_0>
						// set first state to NON to be able to return back to the normal mode
						if(FirstState == Red){
							FirstState == NON;
						}
						current_carLed_Mode = Yellow;
 2e0:	81 e0       	ldi	r24, 0x01	; 1
 2e2:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <current_carLed_Mode>
						previous_carLed_Mode = Red;
 2e6:	82 e0       	ldi	r24, 0x02	; 2
 2e8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
					break;
 2ec:	3c cf       	rjmp	.-392    	; 0x166 <AppStart>

000002ee <main>:
	
	
	Status ret;
	
	
	ret=LED_Init(Port_A,CAR_LED_GREEN);
 2ee:	60 e0       	ldi	r22, 0x00	; 0
 2f0:	81 e4       	ldi	r24, 0x41	; 65
 2f2:	0e 94 50 00 	call	0xa0	; 0xa0 <LED_Init>
	ret=LED_Init(Port_A,CAR_LED_YELLOW);
 2f6:	61 e0       	ldi	r22, 0x01	; 1
 2f8:	81 e4       	ldi	r24, 0x41	; 65
 2fa:	0e 94 50 00 	call	0xa0	; 0xa0 <LED_Init>
	ret=LED_Init(Port_A,CAR_LED_RED);
 2fe:	62 e0       	ldi	r22, 0x02	; 2
 300:	81 e4       	ldi	r24, 0x41	; 65
 302:	0e 94 50 00 	call	0xa0	; 0xa0 <LED_Init>
	ret=LED_Init(Port_B,PEDES_LED_GREEN);
 306:	60 e0       	ldi	r22, 0x00	; 0
 308:	82 e4       	ldi	r24, 0x42	; 66
 30a:	0e 94 50 00 	call	0xa0	; 0xa0 <LED_Init>
	ret=LED_Init(Port_B,PEDES_LED_YELLOW);
 30e:	61 e0       	ldi	r22, 0x01	; 1
 310:	82 e4       	ldi	r24, 0x42	; 66
 312:	0e 94 50 00 	call	0xa0	; 0xa0 <LED_Init>
	ret=LED_Init(Port_B,PEDES_LED_RED);
 316:	62 e0       	ldi	r22, 0x02	; 2
 318:	82 e4       	ldi	r24, 0x42	; 66
 31a:	0e 94 50 00 	call	0xa0	; 0xa0 <LED_Init>
	
	ret = BUTTON_Init(PORTD,PEDESTRIAN_BUTTON);
 31e:	82 b3       	in	r24, 0x12	; 18
 320:	62 e0       	ldi	r22, 0x02	; 2
 322:	0e 94 49 00 	call	0x92	; 0x92 <BUTTON_Init>
	
	ret=delay_init_0(CTC,NO_OUTPUT);
 326:	60 e0       	ldi	r22, 0x00	; 0
 328:	82 e0       	ldi	r24, 0x02	; 2
 32a:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <delay_init_0>
	
	sei();
 32e:	78 94       	sei
	
	MCUCR |= (1<<0) | (1<<1);
 330:	85 b7       	in	r24, 0x35	; 53
 332:	83 60       	ori	r24, 0x03	; 3
 334:	85 bf       	out	0x35, r24	; 53
	
	GICR  |= (1<<6);
 336:	8b b7       	in	r24, 0x3b	; 59
 338:	80 64       	ori	r24, 0x40	; 64
 33a:	8b bf       	out	0x3b, r24	; 59
	
	AppStart();
 33c:	0e 94 b3 00 	call	0x166	; 0x166 <AppStart>

00000340 <__vector_1>:

/**
 * @brief ISR will shift the state from Normal to Pedestrian Upon button press
 * @details the ISR will be fired with the button is pressed
 */
ISR(EXT_INT_0){
 340:	1f 92       	push	r1
 342:	0f 92       	push	r0
 344:	0f b6       	in	r0, 0x3f	; 63
 346:	0f 92       	push	r0
 348:	11 24       	eor	r1, r1
 34a:	2f 93       	push	r18
 34c:	3f 93       	push	r19
 34e:	4f 93       	push	r20
 350:	5f 93       	push	r21
 352:	6f 93       	push	r22
 354:	7f 93       	push	r23
 356:	8f 93       	push	r24
 358:	9f 93       	push	r25
 35a:	af 93       	push	r26
 35c:	bf 93       	push	r27
 35e:	ef 93       	push	r30
 360:	ff 93       	push	r31
	
	// Check if the flag is false which means that we are not in a pedestrian mode and a press on the button is acceptable
	if(Flag == FALSE){
 362:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 366:	85 35       	cpi	r24, 0x55	; 85
 368:	29 f5       	brne	.+74     	; 0x3b4 <__vector_1+0x74>
		Flag = TRUE;
 36a:	8a ea       	ldi	r24, 0xAA	; 170
 36c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		//FirstState will hold the value of the current_carLed_Mode as it is the state when the interrupt occurs
		FirstState = current_carLed_Mode;
 370:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <current_carLed_Mode>
 374:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <FirstState>
		// switch the current mode to pedestrian
		currentMode =Pedestrian;
 378:	91 e0       	ldi	r25, 0x01	; 1
 37a:	90 93 64 00 	sts	0x0064, r25	; 0x800064 <currentMode>
		
		//according to which car led state was active the leds (Red or Green) for the pedestrians will be on
		switch(current_carLed_Mode)
 37e:	81 30       	cpi	r24, 0x01	; 1
 380:	59 f0       	breq	.+22     	; 0x398 <__vector_1+0x58>
 382:	18 f0       	brcs	.+6      	; 0x38a <__vector_1+0x4a>
 384:	82 30       	cpi	r24, 0x02	; 2
 386:	81 f0       	breq	.+32     	; 0x3a8 <__vector_1+0x68>
 388:	15 c0       	rjmp	.+42     	; 0x3b4 <__vector_1+0x74>
		{
			case Green:
				LED_On(Port_B,PEDES_LED_RED);
 38a:	62 e0       	ldi	r22, 0x02	; 2
 38c:	82 e4       	ldi	r24, 0x42	; 66
 38e:	0e 94 57 00 	call	0xae	; 0xae <LED_On>
				current_carLed_Mode =Green;
 392:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <current_carLed_Mode>
			break;
 396:	0e c0       	rjmp	.+28     	; 0x3b4 <__vector_1+0x74>
			case Yellow:
				LED_On(Port_B,PEDES_LED_RED);
 398:	62 e0       	ldi	r22, 0x02	; 2
 39a:	82 e4       	ldi	r24, 0x42	; 66
 39c:	0e 94 57 00 	call	0xae	; 0xae <LED_On>
				current_carLed_Mode =Yellow;
 3a0:	81 e0       	ldi	r24, 0x01	; 1
 3a2:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <current_carLed_Mode>
			break;
 3a6:	06 c0       	rjmp	.+12     	; 0x3b4 <__vector_1+0x74>
			case Red:
				LED_On(Port_B,PEDES_LED_GREEN);
 3a8:	60 e0       	ldi	r22, 0x00	; 0
 3aa:	82 e4       	ldi	r24, 0x42	; 66
 3ac:	0e 94 57 00 	call	0xae	; 0xae <LED_On>
				current_carLed_Mode =Green;
 3b0:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <current_carLed_Mode>
		}
	}
}
 3b4:	ff 91       	pop	r31
 3b6:	ef 91       	pop	r30
 3b8:	bf 91       	pop	r27
 3ba:	af 91       	pop	r26
 3bc:	9f 91       	pop	r25
 3be:	8f 91       	pop	r24
 3c0:	7f 91       	pop	r23
 3c2:	6f 91       	pop	r22
 3c4:	5f 91       	pop	r21
 3c6:	4f 91       	pop	r20
 3c8:	3f 91       	pop	r19
 3ca:	2f 91       	pop	r18
 3cc:	0f 90       	pop	r0
 3ce:	0f be       	out	0x3f, r0	; 63
 3d0:	0f 90       	pop	r0
 3d2:	1f 90       	pop	r1
 3d4:	18 95       	reti

000003d6 <DIO_init>:
 * @param direction (IN//OUT)
 * @return Status return Not_Ok if the passed port is not in range (A->D) or pin number > 7
 */
Status DIO_init(uint8_t pinNumber, uint8_t portNumber, uint8_t direction){
	
	if(pinNumber > 7)
 3d6:	88 30       	cpi	r24, 0x08	; 8
 3d8:	08 f0       	brcs	.+2      	; 0x3dc <DIO_init+0x6>
 3da:	93 c0       	rjmp	.+294    	; 0x502 <__EEPROM_REGION_LENGTH__+0x102>
	return Not_ok;
	//Check which pin in which port needed to be initialized with the given direction
	switch (portNumber)
 3dc:	62 34       	cpi	r22, 0x42	; 66
 3de:	69 f1       	breq	.+90     	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
 3e0:	18 f4       	brcc	.+6      	; 0x3e8 <DIO_init+0x12>
 3e2:	61 34       	cpi	r22, 0x41	; 65
 3e4:	41 f0       	breq	.+16     	; 0x3f6 <DIO_init+0x20>
 3e6:	8f c0       	rjmp	.+286    	; 0x506 <__EEPROM_REGION_LENGTH__+0x106>
 3e8:	63 34       	cpi	r22, 0x43	; 67
 3ea:	09 f4       	brne	.+2      	; 0x3ee <DIO_init+0x18>
 3ec:	48 c0       	rjmp	.+144    	; 0x47e <__EEPROM_REGION_LENGTH__+0x7e>
 3ee:	64 34       	cpi	r22, 0x44	; 68
 3f0:	09 f4       	brne	.+2      	; 0x3f4 <DIO_init+0x1e>
 3f2:	66 c0       	rjmp	.+204    	; 0x4c0 <__EEPROM_REGION_LENGTH__+0xc0>
 3f4:	88 c0       	rjmp	.+272    	; 0x506 <__EEPROM_REGION_LENGTH__+0x106>
	{
		case Port_A:
			if(direction == IN)
 3f6:	41 11       	cpse	r20, r1
 3f8:	0f c0       	rjmp	.+30     	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
			bitclear(DDRA,pinNumber);//input
 3fa:	4a b3       	in	r20, 0x1a	; 26
 3fc:	21 e0       	ldi	r18, 0x01	; 1
 3fe:	30 e0       	ldi	r19, 0x00	; 0
 400:	b9 01       	movw	r22, r18
 402:	02 c0       	rjmp	.+4      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 404:	66 0f       	add	r22, r22
 406:	77 1f       	adc	r23, r23
 408:	8a 95       	dec	r24
 40a:	e2 f7       	brpl	.-8      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 40c:	cb 01       	movw	r24, r22
 40e:	80 95       	com	r24
 410:	84 23       	and	r24, r20
 412:	8a bb       	out	0x1a, r24	; 26
		}
		break;
		default:
		return Not_ok;
	}
	return Ok;
 414:	80 e0       	ldi	r24, 0x00	; 0
 416:	08 95       	ret
	{
		case Port_A:
			if(direction == IN)
			bitclear(DDRA,pinNumber);//input
			//DDRA &=~(1<<pinNumber); //input
			else if (direction == OUT)
 418:	41 30       	cpi	r20, 0x01	; 1
 41a:	09 f0       	breq	.+2      	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 41c:	76 c0       	rjmp	.+236    	; 0x50a <__EEPROM_REGION_LENGTH__+0x10a>
			{
				bitset(DDRA,pinNumber);//output
 41e:	4a b3       	in	r20, 0x1a	; 26
 420:	21 e0       	ldi	r18, 0x01	; 1
 422:	30 e0       	ldi	r19, 0x00	; 0
 424:	b9 01       	movw	r22, r18
 426:	02 c0       	rjmp	.+4      	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
 428:	66 0f       	add	r22, r22
 42a:	77 1f       	adc	r23, r23
 42c:	8a 95       	dec	r24
 42e:	e2 f7       	brpl	.-8      	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
 430:	cb 01       	movw	r24, r22
 432:	84 2b       	or	r24, r20
 434:	8a bb       	out	0x1a, r24	; 26
		}
		break;
		default:
		return Not_ok;
	}
	return Ok;
 436:	80 e0       	ldi	r24, 0x00	; 0
 438:	08 95       	ret
				return Not_ok;
			}
		break;
		
		case Port_B:
		if(direction == IN)
 43a:	41 11       	cpse	r20, r1
 43c:	0f c0       	rjmp	.+30     	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
			bitclear(DDRB,pinNumber);//input
 43e:	47 b3       	in	r20, 0x17	; 23
 440:	21 e0       	ldi	r18, 0x01	; 1
 442:	30 e0       	ldi	r19, 0x00	; 0
 444:	b9 01       	movw	r22, r18
 446:	02 c0       	rjmp	.+4      	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
 448:	66 0f       	add	r22, r22
 44a:	77 1f       	adc	r23, r23
 44c:	8a 95       	dec	r24
 44e:	e2 f7       	brpl	.-8      	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
 450:	cb 01       	movw	r24, r22
 452:	80 95       	com	r24
 454:	84 23       	and	r24, r20
 456:	87 bb       	out	0x17, r24	; 23
		}
		break;
		default:
		return Not_ok;
	}
	return Ok;
 458:	80 e0       	ldi	r24, 0x00	; 0
 45a:	08 95       	ret
		
		case Port_B:
		if(direction == IN)
			bitclear(DDRB,pinNumber);//input
		//DDRB &=~(1<<pinNumber); //input
		else if (direction == OUT)
 45c:	41 30       	cpi	r20, 0x01	; 1
 45e:	09 f0       	breq	.+2      	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
 460:	56 c0       	rjmp	.+172    	; 0x50e <__EEPROM_REGION_LENGTH__+0x10e>
		{
			bitset(DDRB,pinNumber);//output
 462:	47 b3       	in	r20, 0x17	; 23
 464:	21 e0       	ldi	r18, 0x01	; 1
 466:	30 e0       	ldi	r19, 0x00	; 0
 468:	b9 01       	movw	r22, r18
 46a:	02 c0       	rjmp	.+4      	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
 46c:	66 0f       	add	r22, r22
 46e:	77 1f       	adc	r23, r23
 470:	8a 95       	dec	r24
 472:	e2 f7       	brpl	.-8      	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
 474:	cb 01       	movw	r24, r22
 476:	84 2b       	or	r24, r20
 478:	87 bb       	out	0x17, r24	; 23
		}
		break;
		default:
		return Not_ok;
	}
	return Ok;
 47a:	80 e0       	ldi	r24, 0x00	; 0
 47c:	08 95       	ret
			return Not_ok;
		}
		break;
		
		case Port_C:
		if(direction == IN)
 47e:	41 11       	cpse	r20, r1
 480:	0f c0       	rjmp	.+30     	; 0x4a0 <__EEPROM_REGION_LENGTH__+0xa0>
			bitclear(DDRC,pinNumber);//input
 482:	44 b3       	in	r20, 0x14	; 20
 484:	21 e0       	ldi	r18, 0x01	; 1
 486:	30 e0       	ldi	r19, 0x00	; 0
 488:	b9 01       	movw	r22, r18
 48a:	02 c0       	rjmp	.+4      	; 0x490 <__EEPROM_REGION_LENGTH__+0x90>
 48c:	66 0f       	add	r22, r22
 48e:	77 1f       	adc	r23, r23
 490:	8a 95       	dec	r24
 492:	e2 f7       	brpl	.-8      	; 0x48c <__EEPROM_REGION_LENGTH__+0x8c>
 494:	cb 01       	movw	r24, r22
 496:	80 95       	com	r24
 498:	84 23       	and	r24, r20
 49a:	84 bb       	out	0x14, r24	; 20
		}
		break;
		default:
		return Not_ok;
	}
	return Ok;
 49c:	80 e0       	ldi	r24, 0x00	; 0
 49e:	08 95       	ret
		
		case Port_C:
		if(direction == IN)
			bitclear(DDRC,pinNumber);//input
		//DDRC &=~(1<<pinNumber); //input
		else if (direction == OUT)
 4a0:	41 30       	cpi	r20, 0x01	; 1
 4a2:	b9 f5       	brne	.+110    	; 0x512 <__EEPROM_REGION_LENGTH__+0x112>
		{
			bitset(DDRC,pinNumber);//output
 4a4:	44 b3       	in	r20, 0x14	; 20
 4a6:	21 e0       	ldi	r18, 0x01	; 1
 4a8:	30 e0       	ldi	r19, 0x00	; 0
 4aa:	b9 01       	movw	r22, r18
 4ac:	02 c0       	rjmp	.+4      	; 0x4b2 <__EEPROM_REGION_LENGTH__+0xb2>
 4ae:	66 0f       	add	r22, r22
 4b0:	77 1f       	adc	r23, r23
 4b2:	8a 95       	dec	r24
 4b4:	e2 f7       	brpl	.-8      	; 0x4ae <__EEPROM_REGION_LENGTH__+0xae>
 4b6:	cb 01       	movw	r24, r22
 4b8:	84 2b       	or	r24, r20
 4ba:	84 bb       	out	0x14, r24	; 20
		}
		break;
		default:
		return Not_ok;
	}
	return Ok;
 4bc:	80 e0       	ldi	r24, 0x00	; 0
 4be:	08 95       	ret
			return Not_ok;
		}
		break;
			
		case Port_D:
		if(direction == IN)
 4c0:	41 11       	cpse	r20, r1
 4c2:	0f c0       	rjmp	.+30     	; 0x4e2 <__EEPROM_REGION_LENGTH__+0xe2>
			bitclear(DDRD,pinNumber);//input
 4c4:	41 b3       	in	r20, 0x11	; 17
 4c6:	21 e0       	ldi	r18, 0x01	; 1
 4c8:	30 e0       	ldi	r19, 0x00	; 0
 4ca:	b9 01       	movw	r22, r18
 4cc:	02 c0       	rjmp	.+4      	; 0x4d2 <__EEPROM_REGION_LENGTH__+0xd2>
 4ce:	66 0f       	add	r22, r22
 4d0:	77 1f       	adc	r23, r23
 4d2:	8a 95       	dec	r24
 4d4:	e2 f7       	brpl	.-8      	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
 4d6:	cb 01       	movw	r24, r22
 4d8:	80 95       	com	r24
 4da:	84 23       	and	r24, r20
 4dc:	81 bb       	out	0x11, r24	; 17
		}
		break;
		default:
		return Not_ok;
	}
	return Ok;
 4de:	80 e0       	ldi	r24, 0x00	; 0
 4e0:	08 95       	ret
			
		case Port_D:
		if(direction == IN)
			bitclear(DDRD,pinNumber);//input
		//DDRD &=~(1<<pinNumber); //input
		else if (direction == OUT)
 4e2:	41 30       	cpi	r20, 0x01	; 1
 4e4:	c1 f4       	brne	.+48     	; 0x516 <__EEPROM_REGION_LENGTH__+0x116>
		{
			bitset(DDRC,pinNumber);//output
 4e6:	44 b3       	in	r20, 0x14	; 20
 4e8:	21 e0       	ldi	r18, 0x01	; 1
 4ea:	30 e0       	ldi	r19, 0x00	; 0
 4ec:	b9 01       	movw	r22, r18
 4ee:	02 c0       	rjmp	.+4      	; 0x4f4 <__EEPROM_REGION_LENGTH__+0xf4>
 4f0:	66 0f       	add	r22, r22
 4f2:	77 1f       	adc	r23, r23
 4f4:	8a 95       	dec	r24
 4f6:	e2 f7       	brpl	.-8      	; 0x4f0 <__EEPROM_REGION_LENGTH__+0xf0>
 4f8:	cb 01       	movw	r24, r22
 4fa:	84 2b       	or	r24, r20
 4fc:	84 bb       	out	0x14, r24	; 20
		}
		break;
		default:
		return Not_ok;
	}
	return Ok;
 4fe:	80 e0       	ldi	r24, 0x00	; 0
 500:	08 95       	ret
 * @return Status return Not_Ok if the passed port is not in range (A->D) or pin number > 7
 */
Status DIO_init(uint8_t pinNumber, uint8_t portNumber, uint8_t direction){
	
	if(pinNumber > 7)
	return Not_ok;
 502:	81 e0       	ldi	r24, 0x01	; 1
 504:	08 95       	ret
			//error handling
			return Not_ok;
		}
		break;
		default:
		return Not_ok;
 506:	81 e0       	ldi	r24, 0x01	; 1
 508:	08 95       	ret
			{
				bitset(DDRA,pinNumber);//output
				//DDRA |=(1<<pinNumber); 
			}
			else{
				return Not_ok;
 50a:	81 e0       	ldi	r24, 0x01	; 1
 50c:	08 95       	ret
			bitset(DDRB,pinNumber);//output
			//DDRB |=(1<<pinNumber); //output
		}
		else{
			//error handling
			return Not_ok;
 50e:	81 e0       	ldi	r24, 0x01	; 1
 510:	08 95       	ret
			bitset(DDRC,pinNumber);//output
			//DDRC |=(1<<pinNumber); //output
		}
		else{
			//error handling
			return Not_ok;
 512:	81 e0       	ldi	r24, 0x01	; 1
 514:	08 95       	ret
			bitset(DDRC,pinNumber);//output
			//DDRD |=(1<<pinNumber); //output
		}
		else{
			//error handling
			return Not_ok;
 516:	81 e0       	ldi	r24, 0x01	; 1
		break;
		default:
		return Not_ok;
	}
	return Ok;
}
 518:	08 95       	ret

0000051a <DIO_Write>:
 * @param value (HIGH/LOW)
 * @return Status return Not_Ok if the passed pin direction is in not set as output or pin number > 7, otherwise return Ok
 */
Status DIO_Write(uint8_t pinNumber, uint8_t portNumber, uint8_t value) {
	
	if(pinNumber > 7)
 51a:	88 30       	cpi	r24, 0x08	; 8
 51c:	08 f0       	brcs	.+2      	; 0x520 <DIO_Write+0x6>
 51e:	9d c0       	rjmp	.+314    	; 0x65a <DIO_Write+0x140>
	return Not_ok;

	switch (portNumber)
 520:	62 34       	cpi	r22, 0x42	; 66
 522:	81 f1       	breq	.+96     	; 0x584 <DIO_Write+0x6a>
 524:	18 f4       	brcc	.+6      	; 0x52c <DIO_Write+0x12>
 526:	61 34       	cpi	r22, 0x41	; 65
 528:	41 f0       	breq	.+16     	; 0x53a <DIO_Write+0x20>
 52a:	99 c0       	rjmp	.+306    	; 0x65e <DIO_Write+0x144>
 52c:	63 34       	cpi	r22, 0x43	; 67
 52e:	09 f4       	brne	.+2      	; 0x532 <DIO_Write+0x18>
 530:	4e c0       	rjmp	.+156    	; 0x5ce <DIO_Write+0xb4>
 532:	64 34       	cpi	r22, 0x44	; 68
 534:	09 f4       	brne	.+2      	; 0x538 <DIO_Write+0x1e>
 536:	6e c0       	rjmp	.+220    	; 0x614 <DIO_Write+0xfa>
 538:	92 c0       	rjmp	.+292    	; 0x65e <DIO_Write+0x144>
	{
		case Port_A:
		//Check if the pin is set as output
		if (bitRead(DDRA,pinNumber) == 0 )
 53a:	2a b3       	in	r18, 0x1a	; 26
 53c:	61 e0       	ldi	r22, 0x01	; 1
 53e:	70 e0       	ldi	r23, 0x00	; 0
 540:	08 2e       	mov	r0, r24
 542:	02 c0       	rjmp	.+4      	; 0x548 <DIO_Write+0x2e>
 544:	66 0f       	add	r22, r22
 546:	77 1f       	adc	r23, r23
 548:	0a 94       	dec	r0
 54a:	e2 f7       	brpl	.-8      	; 0x544 <DIO_Write+0x2a>
 54c:	30 e0       	ldi	r19, 0x00	; 0
 54e:	26 23       	and	r18, r22
 550:	37 23       	and	r19, r23
 552:	f9 01       	movw	r30, r18
 554:	02 c0       	rjmp	.+4      	; 0x55a <DIO_Write+0x40>
 556:	f5 95       	asr	r31
 558:	e7 95       	ror	r30
 55a:	8a 95       	dec	r24
 55c:	e2 f7       	brpl	.-8      	; 0x556 <DIO_Write+0x3c>
 55e:	ef 2b       	or	r30, r31
 560:	09 f4       	brne	.+2      	; 0x564 <DIO_Write+0x4a>
 562:	7f c0       	rjmp	.+254    	; 0x662 <DIO_Write+0x148>
		return Not_ok;		
		
		if(value == LOW)
 564:	41 11       	cpse	r20, r1
 566:	06 c0       	rjmp	.+12     	; 0x574 <DIO_Write+0x5a>
			bitclear(PORTA,pinNumber); //Write 0
 568:	8b b3       	in	r24, 0x1b	; 27
 56a:	60 95       	com	r22
 56c:	68 23       	and	r22, r24
 56e:	6b bb       	out	0x1b, r22	; 27
		break;
		default:
		return Not_ok;

	}
	return Ok;
 570:	80 e0       	ldi	r24, 0x00	; 0
 572:	08 95       	ret
		if (bitRead(DDRA,pinNumber) == 0 )
		return Not_ok;		
		
		if(value == LOW)
			bitclear(PORTA,pinNumber); //Write 0
		else if (value == HIGH)
 574:	41 30       	cpi	r20, 0x01	; 1
 576:	09 f0       	breq	.+2      	; 0x57a <DIO_Write+0x60>
 578:	76 c0       	rjmp	.+236    	; 0x666 <DIO_Write+0x14c>
		{
			bitset(PORTA,pinNumber); //output
 57a:	8b b3       	in	r24, 0x1b	; 27
 57c:	68 2b       	or	r22, r24
 57e:	6b bb       	out	0x1b, r22	; 27
		break;
		default:
		return Not_ok;

	}
	return Ok;
 580:	80 e0       	ldi	r24, 0x00	; 0
 582:	08 95       	ret
		}
		break;
		
		case Port_B:
		//Check if the pin is set as output
		if (bitRead(DDRB,pinNumber) == 0 )
 584:	27 b3       	in	r18, 0x17	; 23
 586:	61 e0       	ldi	r22, 0x01	; 1
 588:	70 e0       	ldi	r23, 0x00	; 0
 58a:	08 2e       	mov	r0, r24
 58c:	02 c0       	rjmp	.+4      	; 0x592 <DIO_Write+0x78>
 58e:	66 0f       	add	r22, r22
 590:	77 1f       	adc	r23, r23
 592:	0a 94       	dec	r0
 594:	e2 f7       	brpl	.-8      	; 0x58e <DIO_Write+0x74>
 596:	30 e0       	ldi	r19, 0x00	; 0
 598:	26 23       	and	r18, r22
 59a:	37 23       	and	r19, r23
 59c:	f9 01       	movw	r30, r18
 59e:	02 c0       	rjmp	.+4      	; 0x5a4 <DIO_Write+0x8a>
 5a0:	f5 95       	asr	r31
 5a2:	e7 95       	ror	r30
 5a4:	8a 95       	dec	r24
 5a6:	e2 f7       	brpl	.-8      	; 0x5a0 <DIO_Write+0x86>
 5a8:	ef 2b       	or	r30, r31
 5aa:	09 f4       	brne	.+2      	; 0x5ae <DIO_Write+0x94>
 5ac:	5e c0       	rjmp	.+188    	; 0x66a <DIO_Write+0x150>
		return Not_ok;
		
		if(value == LOW)
 5ae:	41 11       	cpse	r20, r1
 5b0:	06 c0       	rjmp	.+12     	; 0x5be <DIO_Write+0xa4>
		bitclear(PORTB,pinNumber); //Write 0
 5b2:	88 b3       	in	r24, 0x18	; 24
 5b4:	60 95       	com	r22
 5b6:	68 23       	and	r22, r24
 5b8:	68 bb       	out	0x18, r22	; 24
		break;
		default:
		return Not_ok;

	}
	return Ok;
 5ba:	80 e0       	ldi	r24, 0x00	; 0
 5bc:	08 95       	ret
		if (bitRead(DDRB,pinNumber) == 0 )
		return Not_ok;
		
		if(value == LOW)
		bitclear(PORTB,pinNumber); //Write 0
		else if (value == HIGH)
 5be:	41 30       	cpi	r20, 0x01	; 1
 5c0:	09 f0       	breq	.+2      	; 0x5c4 <DIO_Write+0xaa>
 5c2:	55 c0       	rjmp	.+170    	; 0x66e <DIO_Write+0x154>
		{
			bitset(PORTB,pinNumber); //output
 5c4:	88 b3       	in	r24, 0x18	; 24
 5c6:	68 2b       	or	r22, r24
 5c8:	68 bb       	out	0x18, r22	; 24
		break;
		default:
		return Not_ok;

	}
	return Ok;
 5ca:	80 e0       	ldi	r24, 0x00	; 0
 5cc:	08 95       	ret
		}
		break;
		
		case Port_C:
		//Check if the pin is set as output
		if (bitRead(DDRC,pinNumber) == 0 )
 5ce:	24 b3       	in	r18, 0x14	; 20
 5d0:	61 e0       	ldi	r22, 0x01	; 1
 5d2:	70 e0       	ldi	r23, 0x00	; 0
 5d4:	08 2e       	mov	r0, r24
 5d6:	02 c0       	rjmp	.+4      	; 0x5dc <DIO_Write+0xc2>
 5d8:	66 0f       	add	r22, r22
 5da:	77 1f       	adc	r23, r23
 5dc:	0a 94       	dec	r0
 5de:	e2 f7       	brpl	.-8      	; 0x5d8 <DIO_Write+0xbe>
 5e0:	30 e0       	ldi	r19, 0x00	; 0
 5e2:	26 23       	and	r18, r22
 5e4:	37 23       	and	r19, r23
 5e6:	f9 01       	movw	r30, r18
 5e8:	02 c0       	rjmp	.+4      	; 0x5ee <DIO_Write+0xd4>
 5ea:	f5 95       	asr	r31
 5ec:	e7 95       	ror	r30
 5ee:	8a 95       	dec	r24
 5f0:	e2 f7       	brpl	.-8      	; 0x5ea <DIO_Write+0xd0>
 5f2:	ef 2b       	or	r30, r31
 5f4:	f1 f1       	breq	.+124    	; 0x672 <DIO_Write+0x158>
		return Not_ok;
		
		if(value == LOW)
 5f6:	41 11       	cpse	r20, r1
 5f8:	06 c0       	rjmp	.+12     	; 0x606 <DIO_Write+0xec>
		bitclear(PORTC,pinNumber); //Write 0
 5fa:	85 b3       	in	r24, 0x15	; 21
 5fc:	60 95       	com	r22
 5fe:	68 23       	and	r22, r24
 600:	65 bb       	out	0x15, r22	; 21
		break;
		default:
		return Not_ok;

	}
	return Ok;
 602:	80 e0       	ldi	r24, 0x00	; 0
 604:	08 95       	ret
		if (bitRead(DDRC,pinNumber) == 0 )
		return Not_ok;
		
		if(value == LOW)
		bitclear(PORTC,pinNumber); //Write 0
		else if (value == HIGH)
 606:	41 30       	cpi	r20, 0x01	; 1
 608:	b1 f5       	brne	.+108    	; 0x676 <DIO_Write+0x15c>
		{
			bitset(PORTC,pinNumber); //output
 60a:	85 b3       	in	r24, 0x15	; 21
 60c:	68 2b       	or	r22, r24
 60e:	65 bb       	out	0x15, r22	; 21
		break;
		default:
		return Not_ok;

	}
	return Ok;
 610:	80 e0       	ldi	r24, 0x00	; 0
 612:	08 95       	ret
		}
		break;
		
		case Port_D:
		//Check if the pin is set as output
		if (bitRead(DDRD,pinNumber) == 0 )
 614:	21 b3       	in	r18, 0x11	; 17
 616:	61 e0       	ldi	r22, 0x01	; 1
 618:	70 e0       	ldi	r23, 0x00	; 0
 61a:	08 2e       	mov	r0, r24
 61c:	02 c0       	rjmp	.+4      	; 0x622 <DIO_Write+0x108>
 61e:	66 0f       	add	r22, r22
 620:	77 1f       	adc	r23, r23
 622:	0a 94       	dec	r0
 624:	e2 f7       	brpl	.-8      	; 0x61e <DIO_Write+0x104>
 626:	30 e0       	ldi	r19, 0x00	; 0
 628:	26 23       	and	r18, r22
 62a:	37 23       	and	r19, r23
 62c:	f9 01       	movw	r30, r18
 62e:	02 c0       	rjmp	.+4      	; 0x634 <DIO_Write+0x11a>
 630:	f5 95       	asr	r31
 632:	e7 95       	ror	r30
 634:	8a 95       	dec	r24
 636:	e2 f7       	brpl	.-8      	; 0x630 <DIO_Write+0x116>
 638:	ef 2b       	or	r30, r31
 63a:	f9 f0       	breq	.+62     	; 0x67a <DIO_Write+0x160>
		return Not_ok;
		
		if(value == LOW)
 63c:	41 11       	cpse	r20, r1
 63e:	06 c0       	rjmp	.+12     	; 0x64c <DIO_Write+0x132>
			bitclear(PORTD,pinNumber); //Write 0
 640:	82 b3       	in	r24, 0x12	; 18
 642:	60 95       	com	r22
 644:	68 23       	and	r22, r24
 646:	62 bb       	out	0x12, r22	; 18
		break;
		default:
		return Not_ok;

	}
	return Ok;
 648:	80 e0       	ldi	r24, 0x00	; 0
 64a:	08 95       	ret
		if (bitRead(DDRD,pinNumber) == 0 )
		return Not_ok;
		
		if(value == LOW)
			bitclear(PORTD,pinNumber); //Write 0
		else if (value == HIGH)
 64c:	41 30       	cpi	r20, 0x01	; 1
 64e:	b9 f4       	brne	.+46     	; 0x67e <DIO_Write+0x164>
		{
			bitset(PORTD,pinNumber); //output
 650:	82 b3       	in	r24, 0x12	; 18
 652:	68 2b       	or	r22, r24
 654:	62 bb       	out	0x12, r22	; 18
		break;
		default:
		return Not_ok;

	}
	return Ok;
 656:	80 e0       	ldi	r24, 0x00	; 0
 658:	08 95       	ret
 * @return Status return Not_Ok if the passed pin direction is in not set as output or pin number > 7, otherwise return Ok
 */
Status DIO_Write(uint8_t pinNumber, uint8_t portNumber, uint8_t value) {
	
	if(pinNumber > 7)
	return Not_ok;
 65a:	81 e0       	ldi	r24, 0x01	; 1
 65c:	08 95       	ret
			//error handling
			return Not_ok;
		}
		break;
		default:
		return Not_ok;
 65e:	81 e0       	ldi	r24, 0x01	; 1
 660:	08 95       	ret
	switch (portNumber)
	{
		case Port_A:
		//Check if the pin is set as output
		if (bitRead(DDRA,pinNumber) == 0 )
		return Not_ok;		
 662:	81 e0       	ldi	r24, 0x01	; 1
 664:	08 95       	ret
		{
			bitset(PORTA,pinNumber); //output
		}
		else{
			//error handling
			return Not_ok;
 666:	81 e0       	ldi	r24, 0x01	; 1
 668:	08 95       	ret
		break;
		
		case Port_B:
		//Check if the pin is set as output
		if (bitRead(DDRB,pinNumber) == 0 )
		return Not_ok;
 66a:	81 e0       	ldi	r24, 0x01	; 1
 66c:	08 95       	ret
		{
			bitset(PORTB,pinNumber); //output
		}
		else{
			//error handling
			return Not_ok;
 66e:	81 e0       	ldi	r24, 0x01	; 1
 670:	08 95       	ret
		break;
		
		case Port_C:
		//Check if the pin is set as output
		if (bitRead(DDRC,pinNumber) == 0 )
		return Not_ok;
 672:	81 e0       	ldi	r24, 0x01	; 1
 674:	08 95       	ret
		{
			bitset(PORTC,pinNumber); //output
		}
		else{
			//error handling
			return Not_ok;
 676:	81 e0       	ldi	r24, 0x01	; 1
 678:	08 95       	ret
		break;
		
		case Port_D:
		//Check if the pin is set as output
		if (bitRead(DDRD,pinNumber) == 0 )
		return Not_ok;
 67a:	81 e0       	ldi	r24, 0x01	; 1
 67c:	08 95       	ret
		{
			bitset(PORTD,pinNumber); //output
		}
		else{
			//error handling
			return Not_ok;
 67e:	81 e0       	ldi	r24, 0x01	; 1
		default:
		return Not_ok;

	}
	return Ok;
}
 680:	08 95       	ret

00000682 <DIO_Toggle>:
 * @param portNumber Port containing the PIN that will be toggled 
 * @return Status return Not_Ok if the passed pin direction is in not set as output or pin number > 7, otherwise return Ok
 */
Status DIO_Toggle(uint8_t pinNumber, uint8_t portNumber){

	if(pinNumber > 7)
 682:	88 30       	cpi	r24, 0x08	; 8
 684:	08 f0       	brcs	.+2      	; 0x688 <DIO_Toggle+0x6>
 686:	71 c0       	rjmp	.+226    	; 0x76a <DIO_Toggle+0xe8>
	return Not_ok;

	switch (portNumber)
 688:	62 34       	cpi	r22, 0x42	; 66
 68a:	21 f1       	breq	.+72     	; 0x6d4 <DIO_Toggle+0x52>
 68c:	18 f4       	brcc	.+6      	; 0x694 <DIO_Toggle+0x12>
 68e:	61 34       	cpi	r22, 0x41	; 65
 690:	39 f0       	breq	.+14     	; 0x6a0 <DIO_Toggle+0x1e>
 692:	6b c0       	rjmp	.+214    	; 0x76a <DIO_Toggle+0xe8>
 694:	63 34       	cpi	r22, 0x43	; 67
 696:	b9 f1       	breq	.+110    	; 0x706 <DIO_Toggle+0x84>
 698:	64 34       	cpi	r22, 0x44	; 68
 69a:	09 f4       	brne	.+2      	; 0x69e <DIO_Toggle+0x1c>
 69c:	4d c0       	rjmp	.+154    	; 0x738 <DIO_Toggle+0xb6>
 69e:	65 c0       	rjmp	.+202    	; 0x76a <DIO_Toggle+0xe8>
	{
		case Port_A:
		//Check if the pin is set as output
		if (bitRead(DDRA,pinNumber) == 0 )
 6a0:	2a b3       	in	r18, 0x1a	; 26
 6a2:	41 e0       	ldi	r20, 0x01	; 1
 6a4:	50 e0       	ldi	r21, 0x00	; 0
 6a6:	08 2e       	mov	r0, r24
 6a8:	02 c0       	rjmp	.+4      	; 0x6ae <DIO_Toggle+0x2c>
 6aa:	44 0f       	add	r20, r20
 6ac:	55 1f       	adc	r21, r21
 6ae:	0a 94       	dec	r0
 6b0:	e2 f7       	brpl	.-8      	; 0x6aa <DIO_Toggle+0x28>
 6b2:	30 e0       	ldi	r19, 0x00	; 0
 6b4:	24 23       	and	r18, r20
 6b6:	35 23       	and	r19, r21
 6b8:	b9 01       	movw	r22, r18
 6ba:	02 c0       	rjmp	.+4      	; 0x6c0 <DIO_Toggle+0x3e>
 6bc:	75 95       	asr	r23
 6be:	67 95       	ror	r22
 6c0:	8a 95       	dec	r24
 6c2:	e2 f7       	brpl	.-8      	; 0x6bc <DIO_Toggle+0x3a>
 6c4:	cb 01       	movw	r24, r22
 6c6:	89 2b       	or	r24, r25
 6c8:	09 f4       	brne	.+2      	; 0x6cc <DIO_Toggle+0x4a>
 6ca:	4f c0       	rjmp	.+158    	; 0x76a <DIO_Toggle+0xe8>
		return Not_ok;
		bitflip(PORTA,pinNumber);
 6cc:	8b b3       	in	r24, 0x1b	; 27
 6ce:	48 27       	eor	r20, r24
 6d0:	4b bb       	out	0x1b, r20	; 27
		break;
 6d2:	4a c0       	rjmp	.+148    	; 0x768 <DIO_Toggle+0xe6>
		
		case Port_B:
		//Check if the pin is set as output
		if (bitRead(DDRB,pinNumber) == 0 )
 6d4:	27 b3       	in	r18, 0x17	; 23
 6d6:	41 e0       	ldi	r20, 0x01	; 1
 6d8:	50 e0       	ldi	r21, 0x00	; 0
 6da:	08 2e       	mov	r0, r24
 6dc:	02 c0       	rjmp	.+4      	; 0x6e2 <DIO_Toggle+0x60>
 6de:	44 0f       	add	r20, r20
 6e0:	55 1f       	adc	r21, r21
 6e2:	0a 94       	dec	r0
 6e4:	e2 f7       	brpl	.-8      	; 0x6de <DIO_Toggle+0x5c>
 6e6:	30 e0       	ldi	r19, 0x00	; 0
 6e8:	24 23       	and	r18, r20
 6ea:	35 23       	and	r19, r21
 6ec:	b9 01       	movw	r22, r18
 6ee:	02 c0       	rjmp	.+4      	; 0x6f4 <DIO_Toggle+0x72>
 6f0:	75 95       	asr	r23
 6f2:	67 95       	ror	r22
 6f4:	8a 95       	dec	r24
 6f6:	e2 f7       	brpl	.-8      	; 0x6f0 <DIO_Toggle+0x6e>
 6f8:	cb 01       	movw	r24, r22
 6fa:	89 2b       	or	r24, r25
 6fc:	b1 f1       	breq	.+108    	; 0x76a <DIO_Toggle+0xe8>
		return Not_ok;
		
		bitflip(PORTB,pinNumber); //Toggle
 6fe:	88 b3       	in	r24, 0x18	; 24
 700:	48 27       	eor	r20, r24
 702:	48 bb       	out	0x18, r20	; 24
		break;
 704:	31 c0       	rjmp	.+98     	; 0x768 <DIO_Toggle+0xe6>
		
		case Port_C:
		//Check if the pin is set as output
		if (bitRead(DDRC,pinNumber) == 0 )
 706:	24 b3       	in	r18, 0x14	; 20
 708:	41 e0       	ldi	r20, 0x01	; 1
 70a:	50 e0       	ldi	r21, 0x00	; 0
 70c:	08 2e       	mov	r0, r24
 70e:	02 c0       	rjmp	.+4      	; 0x714 <DIO_Toggle+0x92>
 710:	44 0f       	add	r20, r20
 712:	55 1f       	adc	r21, r21
 714:	0a 94       	dec	r0
 716:	e2 f7       	brpl	.-8      	; 0x710 <DIO_Toggle+0x8e>
 718:	30 e0       	ldi	r19, 0x00	; 0
 71a:	24 23       	and	r18, r20
 71c:	35 23       	and	r19, r21
 71e:	b9 01       	movw	r22, r18
 720:	02 c0       	rjmp	.+4      	; 0x726 <DIO_Toggle+0xa4>
 722:	75 95       	asr	r23
 724:	67 95       	ror	r22
 726:	8a 95       	dec	r24
 728:	e2 f7       	brpl	.-8      	; 0x722 <DIO_Toggle+0xa0>
 72a:	cb 01       	movw	r24, r22
 72c:	89 2b       	or	r24, r25
 72e:	e9 f0       	breq	.+58     	; 0x76a <DIO_Toggle+0xe8>
		return Not_ok;
		bitflip(PORTC,pinNumber); //Toggle
 730:	85 b3       	in	r24, 0x15	; 21
 732:	48 27       	eor	r20, r24
 734:	45 bb       	out	0x15, r20	; 21
		break;
 736:	18 c0       	rjmp	.+48     	; 0x768 <DIO_Toggle+0xe6>
		
		case Port_D:
		//Check if the pin is set as output
		if (bitRead(DDRD,pinNumber) == 0 )
 738:	21 b3       	in	r18, 0x11	; 17
 73a:	41 e0       	ldi	r20, 0x01	; 1
 73c:	50 e0       	ldi	r21, 0x00	; 0
 73e:	08 2e       	mov	r0, r24
 740:	02 c0       	rjmp	.+4      	; 0x746 <DIO_Toggle+0xc4>
 742:	44 0f       	add	r20, r20
 744:	55 1f       	adc	r21, r21
 746:	0a 94       	dec	r0
 748:	e2 f7       	brpl	.-8      	; 0x742 <DIO_Toggle+0xc0>
 74a:	30 e0       	ldi	r19, 0x00	; 0
 74c:	24 23       	and	r18, r20
 74e:	35 23       	and	r19, r21
 750:	b9 01       	movw	r22, r18
 752:	02 c0       	rjmp	.+4      	; 0x758 <DIO_Toggle+0xd6>
 754:	75 95       	asr	r23
 756:	67 95       	ror	r22
 758:	8a 95       	dec	r24
 75a:	e2 f7       	brpl	.-8      	; 0x754 <DIO_Toggle+0xd2>
 75c:	cb 01       	movw	r24, r22
 75e:	89 2b       	or	r24, r25
 760:	21 f0       	breq	.+8      	; 0x76a <DIO_Toggle+0xe8>
		return Not_ok;
		bitflip(PORTD,pinNumber); //Toggle
 762:	82 b3       	in	r24, 0x12	; 18
 764:	48 27       	eor	r20, r24
 766:	42 bb       	out	0x12, r20	; 18
		break;
		
		default:
		return Not_ok;
	}
}
 768:	08 95       	ret
 76a:	81 e0       	ldi	r24, 0x01	; 1
 76c:	08 95       	ret

0000076e <timer0_Init>:
 * @return Status Ok for no error occurs, Not_Ok for error during intialization
 */
Status timer0_Init(Timer_Mode mode,COM_Mode comMode){
	
	//clear all bits
	TCCR0 = 0x00;
 76e:	13 be       	out	0x33, r1	; 51

	//Setting the Compare Match Output Mode
	if(comMode <4)
 770:	64 30       	cpi	r22, 0x04	; 4
 772:	78 f5       	brcc	.+94     	; 0x7d2 <timer0_Init+0x64>
	TCCR0 |= comMode<<4;
 774:	93 b7       	in	r25, 0x33	; 51
 776:	20 e1       	ldi	r18, 0x10	; 16
 778:	62 9f       	mul	r22, r18
 77a:	b0 01       	movw	r22, r0
 77c:	11 24       	eor	r1, r1
 77e:	69 2b       	or	r22, r25
 780:	63 bf       	out	0x33, r22	; 51
	else
	return Not_ok;
	//Setting the mode
	switch (mode){
 782:	81 30       	cpi	r24, 0x01	; 1
 784:	71 f0       	breq	.+28     	; 0x7a2 <timer0_Init+0x34>
 786:	28 f0       	brcs	.+10     	; 0x792 <timer0_Init+0x24>
 788:	82 30       	cpi	r24, 0x02	; 2
 78a:	99 f0       	breq	.+38     	; 0x7b2 <timer0_Init+0x44>
 78c:	83 30       	cpi	r24, 0x03	; 3
 78e:	c9 f0       	breq	.+50     	; 0x7c2 <timer0_Init+0x54>
 790:	22 c0       	rjmp	.+68     	; 0x7d6 <timer0_Init+0x68>
		case Timer_Normal:
		bitclear(TCCR0,WGM01);
 792:	83 b7       	in	r24, 0x33	; 51
 794:	87 7f       	andi	r24, 0xF7	; 247
 796:	83 bf       	out	0x33, r24	; 51
		bitclear(TCCR0,WGM00);
 798:	83 b7       	in	r24, 0x33	; 51
 79a:	8f 7b       	andi	r24, 0xBF	; 191
 79c:	83 bf       	out	0x33, r24	; 51
		bitset(TCCR0,WGM00);
		break;
		default:
		return Not_ok;				 
	}
	return Ok;
 79e:	80 e0       	ldi	r24, 0x00	; 0
	//Setting the mode
	switch (mode){
		case Timer_Normal:
		bitclear(TCCR0,WGM01);
		bitclear(TCCR0,WGM00);
		break;
 7a0:	08 95       	ret
		
		case Phase_Correct:
		bitset(TCCR0,WGM00);
 7a2:	83 b7       	in	r24, 0x33	; 51
 7a4:	80 64       	ori	r24, 0x40	; 64
 7a6:	83 bf       	out	0x33, r24	; 51
		bitclear(TCCR0,WGM01);		
 7a8:	83 b7       	in	r24, 0x33	; 51
 7aa:	87 7f       	andi	r24, 0xF7	; 247
 7ac:	83 bf       	out	0x33, r24	; 51
		bitset(TCCR0,WGM00);
		break;
		default:
		return Not_ok;				 
	}
	return Ok;
 7ae:	80 e0       	ldi	r24, 0x00	; 0
		break;
		
		case Phase_Correct:
		bitset(TCCR0,WGM00);
		bitclear(TCCR0,WGM01);		
		break;
 7b0:	08 95       	ret
		
		case CTC:
		bitclear(TCCR0,WGM00);
 7b2:	83 b7       	in	r24, 0x33	; 51
 7b4:	8f 7b       	andi	r24, 0xBF	; 191
 7b6:	83 bf       	out	0x33, r24	; 51
		bitset(TCCR0,WGM01);
 7b8:	83 b7       	in	r24, 0x33	; 51
 7ba:	88 60       	ori	r24, 0x08	; 8
 7bc:	83 bf       	out	0x33, r24	; 51
		bitset(TCCR0,WGM00);
		break;
		default:
		return Not_ok;				 
	}
	return Ok;
 7be:	80 e0       	ldi	r24, 0x00	; 0
		break;
		
		case CTC:
		bitclear(TCCR0,WGM00);
		bitset(TCCR0,WGM01);
		break;
 7c0:	08 95       	ret
		
		case Fast_PWM:
		bitset(TCCR0,WGM01);
 7c2:	83 b7       	in	r24, 0x33	; 51
 7c4:	88 60       	ori	r24, 0x08	; 8
 7c6:	83 bf       	out	0x33, r24	; 51
		bitset(TCCR0,WGM00);
 7c8:	83 b7       	in	r24, 0x33	; 51
 7ca:	80 64       	ori	r24, 0x40	; 64
 7cc:	83 bf       	out	0x33, r24	; 51
		break;
		default:
		return Not_ok;				 
	}
	return Ok;
 7ce:	80 e0       	ldi	r24, 0x00	; 0
		break;
		
		case Fast_PWM:
		bitset(TCCR0,WGM01);
		bitset(TCCR0,WGM00);
		break;
 7d0:	08 95       	ret

	//Setting the Compare Match Output Mode
	if(comMode <4)
	TCCR0 |= comMode<<4;
	else
	return Not_ok;
 7d2:	81 e0       	ldi	r24, 0x01	; 1
 7d4:	08 95       	ret
		case Fast_PWM:
		bitset(TCCR0,WGM01);
		bitset(TCCR0,WGM00);
		break;
		default:
		return Not_ok;				 
 7d6:	81 e0       	ldi	r24, 0x01	; 1
	}
	return Ok;
}
 7d8:	08 95       	ret

000007da <timer0_start>:
 * @param prescalor the value of the prescalor (in the project it prescalor 64 will be used)
 * @return Status returns ok after it starts the timer.
 */
Status timer0_start(uint8_t CmpValue,clk_source_T0 prescalor){
	
	if(prescalor > 7)
 7da:	68 30       	cpi	r22, 0x08	; 8
 7dc:	38 f4       	brcc	.+14     	; 0x7ec <timer0_start+0x12>
	return Not_ok;
	TCNT0 = 0x00;
 7de:	12 be       	out	0x32, r1	; 50
	//Set the offset
	OCR0 = CmpValue;
 7e0:	8c bf       	out	0x3c, r24	; 60
	//setting the prescalor
	TCCR0 |= prescalor;
 7e2:	83 b7       	in	r24, 0x33	; 51
 7e4:	68 2b       	or	r22, r24
 7e6:	63 bf       	out	0x33, r22	; 51
	return Ok;
 7e8:	80 e0       	ldi	r24, 0x00	; 0
 7ea:	08 95       	ret
 * @return Status returns ok after it starts the timer.
 */
Status timer0_start(uint8_t CmpValue,clk_source_T0 prescalor){
	
	if(prescalor > 7)
	return Not_ok;
 7ec:	81 e0       	ldi	r24, 0x01	; 1
	//Set the offset
	OCR0 = CmpValue;
	//setting the prescalor
	TCCR0 |= prescalor;
	return Ok;
}
 7ee:	08 95       	ret

000007f0 <timer0_stop>:
 * @brief stop the timer 0
 * @details Clear TCCR0 and OCR0 
 * @return Status returns ok after it stops the timer.
 */
Status timer0_stop(){
	TCCR0 = 0x00;
 7f0:	13 be       	out	0x33, r1	; 51
	OCR0 = 0x00;
 7f2:	1c be       	out	0x3c, r1	; 60
	return Ok;
}
 7f4:	80 e0       	ldi	r24, 0x00	; 0
 7f6:	08 95       	ret

000007f8 <delay_init_0>:
 */
Status delay_init_0(Timer_Mode mode,COM_Mode comMode){
	
	Status ret = Not_ok;
//Call the timer driver to set the mode and COM of timer 0	
	ret = timer0_Init(mode,comMode);
 7f8:	0e 94 b7 03 	call	0x76e	; 0x76e <timer0_Init>
	return ret;
}
 7fc:	08 95       	ret

000007fe <delay_ms_0>:
 * @details according to the presecalor used, the function will calculate the number of overflows and the OCR 
 * and performs a loop the timer 0 reach the OCR the exact number of overflows
 * @param delay_ms The amount of delay in milli second
 * @return Status Not_Ok if the component failed to perform the delay otherwise will return OK.
 */
Status delay_ms_0(volatile uint16_t delay_ms){
 7fe:	8f 92       	push	r8
 800:	9f 92       	push	r9
 802:	af 92       	push	r10
 804:	bf 92       	push	r11
 806:	cf 92       	push	r12
 808:	df 92       	push	r13
 80a:	ef 92       	push	r14
 80c:	ff 92       	push	r15
 80e:	0f 93       	push	r16
 810:	1f 93       	push	r17
 812:	cf 93       	push	r28
 814:	df 93       	push	r29
 816:	00 d0       	rcall	.+0      	; 0x818 <__DATA_REGION_LENGTH__+0x18>
 818:	00 d0       	rcall	.+0      	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
 81a:	cd b7       	in	r28, 0x3d	; 61
 81c:	de b7       	in	r29, 0x3e	; 62
 81e:	9c 83       	std	Y+4, r25	; 0x04
 820:	8b 83       	std	Y+3, r24	; 0x03
	
	
	Status ret = Not_ok;
	// initialize the prescalor, the choice was prescalor 64
	volatile clk_source_T0  prescalor = T0_Precalor_64;
 822:	83 e0       	ldi	r24, 0x03	; 3
 824:	89 83       	std	Y+1, r24	; 0x01
	
	
	//calculate the number of overflows needed for the 
	uint16_t Num_Overflow = (uint16_t)((delay_ms/16.384)+1); 
 826:	6b 81       	ldd	r22, Y+3	; 0x03
 828:	7c 81       	ldd	r23, Y+4	; 0x04
 82a:	80 e0       	ldi	r24, 0x00	; 0
 82c:	90 e0       	ldi	r25, 0x00	; 0
 82e:	0e 94 7e 05 	call	0xafc	; 0xafc <__floatunsisf>
 832:	2f e6       	ldi	r18, 0x6F	; 111
 834:	32 e1       	ldi	r19, 0x12	; 18
 836:	43 e8       	ldi	r20, 0x83	; 131
 838:	51 e4       	ldi	r21, 0x41	; 65
 83a:	0e 94 dd 04 	call	0x9ba	; 0x9ba <__divsf3>
 83e:	20 e0       	ldi	r18, 0x00	; 0
 840:	30 e0       	ldi	r19, 0x00	; 0
 842:	40 e8       	ldi	r20, 0x80	; 128
 844:	5f e3       	ldi	r21, 0x3F	; 63
 846:	0e 94 71 04 	call	0x8e2	; 0x8e2 <__addsf3>
 84a:	0e 94 4f 05 	call	0xa9e	; 0xa9e <__fixunssfsi>
 84e:	6b 01       	movw	r12, r22
 850:	7c 01       	movw	r14, r24
 852:	8b 01       	movw	r16, r22
	
	//calculate the compare time to be placed in OCR0
	volatile uint8_t compare_value = (uint8_t)((delay_ms/0.064)/Num_Overflow);
 854:	6b 81       	ldd	r22, Y+3	; 0x03
 856:	7c 81       	ldd	r23, Y+4	; 0x04
 858:	80 e0       	ldi	r24, 0x00	; 0
 85a:	90 e0       	ldi	r25, 0x00	; 0
 85c:	0e 94 7e 05 	call	0xafc	; 0xafc <__floatunsisf>
 860:	2f e6       	ldi	r18, 0x6F	; 111
 862:	32 e1       	ldi	r19, 0x12	; 18
 864:	43 e8       	ldi	r20, 0x83	; 131
 866:	5d e3       	ldi	r21, 0x3D	; 61
 868:	0e 94 dd 04 	call	0x9ba	; 0x9ba <__divsf3>
 86c:	4b 01       	movw	r8, r22
 86e:	5c 01       	movw	r10, r24
 870:	b6 01       	movw	r22, r12
 872:	80 e0       	ldi	r24, 0x00	; 0
 874:	90 e0       	ldi	r25, 0x00	; 0
 876:	0e 94 7e 05 	call	0xafc	; 0xafc <__floatunsisf>
 87a:	9b 01       	movw	r18, r22
 87c:	ac 01       	movw	r20, r24
 87e:	c5 01       	movw	r24, r10
 880:	b4 01       	movw	r22, r8
 882:	0e 94 dd 04 	call	0x9ba	; 0x9ba <__divsf3>
 886:	0e 94 4f 05 	call	0xa9e	; 0xa9e <__fixunssfsi>
 88a:	6a 83       	std	Y+2, r22	; 0x02
	
	//call timer0_start to start the timer with the required OCR and prescalor
	ret = timer0_start(compare_value,prescalor);
 88c:	69 81       	ldd	r22, Y+1	; 0x01
 88e:	8a 81       	ldd	r24, Y+2	; 0x02
 890:	0e 94 ed 03 	call	0x7da	; 0x7da <timer0_start>
	
	if(ret == Not_ok )
 894:	81 30       	cpi	r24, 0x01	; 1
 896:	99 f0       	breq	.+38     	; 0x8be <__stack+0x5f>
 898:	20 e0       	ldi	r18, 0x00	; 0
 89a:	30 e0       	ldi	r19, 0x00	; 0
 89c:	0b c0       	rjmp	.+22     	; 0x8b4 <__stack+0x55>
		return ret;
	//Loop until the number of overflows are reached
	for(int i =0; i<Num_Overflow;i++){
		while((TIFR & (1<<1)) == 0);
 89e:	08 b6       	in	r0, 0x38	; 56
 8a0:	01 fe       	sbrs	r0, 1
 8a2:	fd cf       	rjmp	.-6      	; 0x89e <__stack+0x3f>
		TIFR |= (1<<1);
 8a4:	88 b7       	in	r24, 0x38	; 56
 8a6:	82 60       	ori	r24, 0x02	; 2
 8a8:	88 bf       	out	0x38, r24	; 56
		TIFR |= (1<<0);
 8aa:	88 b7       	in	r24, 0x38	; 56
 8ac:	81 60       	ori	r24, 0x01	; 1
 8ae:	88 bf       	out	0x38, r24	; 56
	ret = timer0_start(compare_value,prescalor);
	
	if(ret == Not_ok )
		return ret;
	//Loop until the number of overflows are reached
	for(int i =0; i<Num_Overflow;i++){
 8b0:	2f 5f       	subi	r18, 0xFF	; 255
 8b2:	3f 4f       	sbci	r19, 0xFF	; 255
 8b4:	20 17       	cp	r18, r16
 8b6:	31 07       	cpc	r19, r17
 8b8:	90 f3       	brcs	.-28     	; 0x89e <__stack+0x3f>
		while((TIFR & (1<<1)) == 0);
		TIFR |= (1<<1);
		TIFR |= (1<<0);
	}
	// stop the timer
	ret = timer0_stop();
 8ba:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <timer0_stop>
	return ret;
}
 8be:	0f 90       	pop	r0
 8c0:	0f 90       	pop	r0
 8c2:	0f 90       	pop	r0
 8c4:	0f 90       	pop	r0
 8c6:	df 91       	pop	r29
 8c8:	cf 91       	pop	r28
 8ca:	1f 91       	pop	r17
 8cc:	0f 91       	pop	r16
 8ce:	ff 90       	pop	r15
 8d0:	ef 90       	pop	r14
 8d2:	df 90       	pop	r13
 8d4:	cf 90       	pop	r12
 8d6:	bf 90       	pop	r11
 8d8:	af 90       	pop	r10
 8da:	9f 90       	pop	r9
 8dc:	8f 90       	pop	r8
 8de:	08 95       	ret

000008e0 <__subsf3>:
 8e0:	50 58       	subi	r21, 0x80	; 128

000008e2 <__addsf3>:
 8e2:	bb 27       	eor	r27, r27
 8e4:	aa 27       	eor	r26, r26
 8e6:	0e 94 88 04 	call	0x910	; 0x910 <__addsf3x>
 8ea:	0c 94 d2 05 	jmp	0xba4	; 0xba4 <__fp_round>
 8ee:	0e 94 c4 05 	call	0xb88	; 0xb88 <__fp_pscA>
 8f2:	38 f0       	brcs	.+14     	; 0x902 <__addsf3+0x20>
 8f4:	0e 94 cb 05 	call	0xb96	; 0xb96 <__fp_pscB>
 8f8:	20 f0       	brcs	.+8      	; 0x902 <__addsf3+0x20>
 8fa:	39 f4       	brne	.+14     	; 0x90a <__addsf3+0x28>
 8fc:	9f 3f       	cpi	r25, 0xFF	; 255
 8fe:	19 f4       	brne	.+6      	; 0x906 <__addsf3+0x24>
 900:	26 f4       	brtc	.+8      	; 0x90a <__addsf3+0x28>
 902:	0c 94 c1 05 	jmp	0xb82	; 0xb82 <__fp_nan>
 906:	0e f4       	brtc	.+2      	; 0x90a <__addsf3+0x28>
 908:	e0 95       	com	r30
 90a:	e7 fb       	bst	r30, 7
 90c:	0c 94 bb 05 	jmp	0xb76	; 0xb76 <__fp_inf>

00000910 <__addsf3x>:
 910:	e9 2f       	mov	r30, r25
 912:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <__fp_split3>
 916:	58 f3       	brcs	.-42     	; 0x8ee <__addsf3+0xc>
 918:	ba 17       	cp	r27, r26
 91a:	62 07       	cpc	r22, r18
 91c:	73 07       	cpc	r23, r19
 91e:	84 07       	cpc	r24, r20
 920:	95 07       	cpc	r25, r21
 922:	20 f0       	brcs	.+8      	; 0x92c <__addsf3x+0x1c>
 924:	79 f4       	brne	.+30     	; 0x944 <__addsf3x+0x34>
 926:	a6 f5       	brtc	.+104    	; 0x990 <__addsf3x+0x80>
 928:	0c 94 05 06 	jmp	0xc0a	; 0xc0a <__fp_zero>
 92c:	0e f4       	brtc	.+2      	; 0x930 <__addsf3x+0x20>
 92e:	e0 95       	com	r30
 930:	0b 2e       	mov	r0, r27
 932:	ba 2f       	mov	r27, r26
 934:	a0 2d       	mov	r26, r0
 936:	0b 01       	movw	r0, r22
 938:	b9 01       	movw	r22, r18
 93a:	90 01       	movw	r18, r0
 93c:	0c 01       	movw	r0, r24
 93e:	ca 01       	movw	r24, r20
 940:	a0 01       	movw	r20, r0
 942:	11 24       	eor	r1, r1
 944:	ff 27       	eor	r31, r31
 946:	59 1b       	sub	r21, r25
 948:	99 f0       	breq	.+38     	; 0x970 <__addsf3x+0x60>
 94a:	59 3f       	cpi	r21, 0xF9	; 249
 94c:	50 f4       	brcc	.+20     	; 0x962 <__addsf3x+0x52>
 94e:	50 3e       	cpi	r21, 0xE0	; 224
 950:	68 f1       	brcs	.+90     	; 0x9ac <__addsf3x+0x9c>
 952:	1a 16       	cp	r1, r26
 954:	f0 40       	sbci	r31, 0x00	; 0
 956:	a2 2f       	mov	r26, r18
 958:	23 2f       	mov	r18, r19
 95a:	34 2f       	mov	r19, r20
 95c:	44 27       	eor	r20, r20
 95e:	58 5f       	subi	r21, 0xF8	; 248
 960:	f3 cf       	rjmp	.-26     	; 0x948 <__addsf3x+0x38>
 962:	46 95       	lsr	r20
 964:	37 95       	ror	r19
 966:	27 95       	ror	r18
 968:	a7 95       	ror	r26
 96a:	f0 40       	sbci	r31, 0x00	; 0
 96c:	53 95       	inc	r21
 96e:	c9 f7       	brne	.-14     	; 0x962 <__addsf3x+0x52>
 970:	7e f4       	brtc	.+30     	; 0x990 <__addsf3x+0x80>
 972:	1f 16       	cp	r1, r31
 974:	ba 0b       	sbc	r27, r26
 976:	62 0b       	sbc	r22, r18
 978:	73 0b       	sbc	r23, r19
 97a:	84 0b       	sbc	r24, r20
 97c:	ba f0       	brmi	.+46     	; 0x9ac <__addsf3x+0x9c>
 97e:	91 50       	subi	r25, 0x01	; 1
 980:	a1 f0       	breq	.+40     	; 0x9aa <__addsf3x+0x9a>
 982:	ff 0f       	add	r31, r31
 984:	bb 1f       	adc	r27, r27
 986:	66 1f       	adc	r22, r22
 988:	77 1f       	adc	r23, r23
 98a:	88 1f       	adc	r24, r24
 98c:	c2 f7       	brpl	.-16     	; 0x97e <__addsf3x+0x6e>
 98e:	0e c0       	rjmp	.+28     	; 0x9ac <__addsf3x+0x9c>
 990:	ba 0f       	add	r27, r26
 992:	62 1f       	adc	r22, r18
 994:	73 1f       	adc	r23, r19
 996:	84 1f       	adc	r24, r20
 998:	48 f4       	brcc	.+18     	; 0x9ac <__addsf3x+0x9c>
 99a:	87 95       	ror	r24
 99c:	77 95       	ror	r23
 99e:	67 95       	ror	r22
 9a0:	b7 95       	ror	r27
 9a2:	f7 95       	ror	r31
 9a4:	9e 3f       	cpi	r25, 0xFE	; 254
 9a6:	08 f0       	brcs	.+2      	; 0x9aa <__addsf3x+0x9a>
 9a8:	b0 cf       	rjmp	.-160    	; 0x90a <__addsf3+0x28>
 9aa:	93 95       	inc	r25
 9ac:	88 0f       	add	r24, r24
 9ae:	08 f0       	brcs	.+2      	; 0x9b2 <__addsf3x+0xa2>
 9b0:	99 27       	eor	r25, r25
 9b2:	ee 0f       	add	r30, r30
 9b4:	97 95       	ror	r25
 9b6:	87 95       	ror	r24
 9b8:	08 95       	ret

000009ba <__divsf3>:
 9ba:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <__divsf3x>
 9be:	0c 94 d2 05 	jmp	0xba4	; 0xba4 <__fp_round>
 9c2:	0e 94 cb 05 	call	0xb96	; 0xb96 <__fp_pscB>
 9c6:	58 f0       	brcs	.+22     	; 0x9de <__divsf3+0x24>
 9c8:	0e 94 c4 05 	call	0xb88	; 0xb88 <__fp_pscA>
 9cc:	40 f0       	brcs	.+16     	; 0x9de <__divsf3+0x24>
 9ce:	29 f4       	brne	.+10     	; 0x9da <__divsf3+0x20>
 9d0:	5f 3f       	cpi	r21, 0xFF	; 255
 9d2:	29 f0       	breq	.+10     	; 0x9de <__divsf3+0x24>
 9d4:	0c 94 bb 05 	jmp	0xb76	; 0xb76 <__fp_inf>
 9d8:	51 11       	cpse	r21, r1
 9da:	0c 94 06 06 	jmp	0xc0c	; 0xc0c <__fp_szero>
 9de:	0c 94 c1 05 	jmp	0xb82	; 0xb82 <__fp_nan>

000009e2 <__divsf3x>:
 9e2:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <__fp_split3>
 9e6:	68 f3       	brcs	.-38     	; 0x9c2 <__divsf3+0x8>

000009e8 <__divsf3_pse>:
 9e8:	99 23       	and	r25, r25
 9ea:	b1 f3       	breq	.-20     	; 0x9d8 <__divsf3+0x1e>
 9ec:	55 23       	and	r21, r21
 9ee:	91 f3       	breq	.-28     	; 0x9d4 <__divsf3+0x1a>
 9f0:	95 1b       	sub	r25, r21
 9f2:	55 0b       	sbc	r21, r21
 9f4:	bb 27       	eor	r27, r27
 9f6:	aa 27       	eor	r26, r26
 9f8:	62 17       	cp	r22, r18
 9fa:	73 07       	cpc	r23, r19
 9fc:	84 07       	cpc	r24, r20
 9fe:	38 f0       	brcs	.+14     	; 0xa0e <__divsf3_pse+0x26>
 a00:	9f 5f       	subi	r25, 0xFF	; 255
 a02:	5f 4f       	sbci	r21, 0xFF	; 255
 a04:	22 0f       	add	r18, r18
 a06:	33 1f       	adc	r19, r19
 a08:	44 1f       	adc	r20, r20
 a0a:	aa 1f       	adc	r26, r26
 a0c:	a9 f3       	breq	.-22     	; 0x9f8 <__divsf3_pse+0x10>
 a0e:	35 d0       	rcall	.+106    	; 0xa7a <__divsf3_pse+0x92>
 a10:	0e 2e       	mov	r0, r30
 a12:	3a f0       	brmi	.+14     	; 0xa22 <__divsf3_pse+0x3a>
 a14:	e0 e8       	ldi	r30, 0x80	; 128
 a16:	32 d0       	rcall	.+100    	; 0xa7c <__divsf3_pse+0x94>
 a18:	91 50       	subi	r25, 0x01	; 1
 a1a:	50 40       	sbci	r21, 0x00	; 0
 a1c:	e6 95       	lsr	r30
 a1e:	00 1c       	adc	r0, r0
 a20:	ca f7       	brpl	.-14     	; 0xa14 <__divsf3_pse+0x2c>
 a22:	2b d0       	rcall	.+86     	; 0xa7a <__divsf3_pse+0x92>
 a24:	fe 2f       	mov	r31, r30
 a26:	29 d0       	rcall	.+82     	; 0xa7a <__divsf3_pse+0x92>
 a28:	66 0f       	add	r22, r22
 a2a:	77 1f       	adc	r23, r23
 a2c:	88 1f       	adc	r24, r24
 a2e:	bb 1f       	adc	r27, r27
 a30:	26 17       	cp	r18, r22
 a32:	37 07       	cpc	r19, r23
 a34:	48 07       	cpc	r20, r24
 a36:	ab 07       	cpc	r26, r27
 a38:	b0 e8       	ldi	r27, 0x80	; 128
 a3a:	09 f0       	breq	.+2      	; 0xa3e <__divsf3_pse+0x56>
 a3c:	bb 0b       	sbc	r27, r27
 a3e:	80 2d       	mov	r24, r0
 a40:	bf 01       	movw	r22, r30
 a42:	ff 27       	eor	r31, r31
 a44:	93 58       	subi	r25, 0x83	; 131
 a46:	5f 4f       	sbci	r21, 0xFF	; 255
 a48:	3a f0       	brmi	.+14     	; 0xa58 <__divsf3_pse+0x70>
 a4a:	9e 3f       	cpi	r25, 0xFE	; 254
 a4c:	51 05       	cpc	r21, r1
 a4e:	78 f0       	brcs	.+30     	; 0xa6e <__divsf3_pse+0x86>
 a50:	0c 94 bb 05 	jmp	0xb76	; 0xb76 <__fp_inf>
 a54:	0c 94 06 06 	jmp	0xc0c	; 0xc0c <__fp_szero>
 a58:	5f 3f       	cpi	r21, 0xFF	; 255
 a5a:	e4 f3       	brlt	.-8      	; 0xa54 <__divsf3_pse+0x6c>
 a5c:	98 3e       	cpi	r25, 0xE8	; 232
 a5e:	d4 f3       	brlt	.-12     	; 0xa54 <__divsf3_pse+0x6c>
 a60:	86 95       	lsr	r24
 a62:	77 95       	ror	r23
 a64:	67 95       	ror	r22
 a66:	b7 95       	ror	r27
 a68:	f7 95       	ror	r31
 a6a:	9f 5f       	subi	r25, 0xFF	; 255
 a6c:	c9 f7       	brne	.-14     	; 0xa60 <__divsf3_pse+0x78>
 a6e:	88 0f       	add	r24, r24
 a70:	91 1d       	adc	r25, r1
 a72:	96 95       	lsr	r25
 a74:	87 95       	ror	r24
 a76:	97 f9       	bld	r25, 7
 a78:	08 95       	ret
 a7a:	e1 e0       	ldi	r30, 0x01	; 1
 a7c:	66 0f       	add	r22, r22
 a7e:	77 1f       	adc	r23, r23
 a80:	88 1f       	adc	r24, r24
 a82:	bb 1f       	adc	r27, r27
 a84:	62 17       	cp	r22, r18
 a86:	73 07       	cpc	r23, r19
 a88:	84 07       	cpc	r24, r20
 a8a:	ba 07       	cpc	r27, r26
 a8c:	20 f0       	brcs	.+8      	; 0xa96 <__divsf3_pse+0xae>
 a8e:	62 1b       	sub	r22, r18
 a90:	73 0b       	sbc	r23, r19
 a92:	84 0b       	sbc	r24, r20
 a94:	ba 0b       	sbc	r27, r26
 a96:	ee 1f       	adc	r30, r30
 a98:	88 f7       	brcc	.-30     	; 0xa7c <__divsf3_pse+0x94>
 a9a:	e0 95       	com	r30
 a9c:	08 95       	ret

00000a9e <__fixunssfsi>:
 a9e:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <__fp_splitA>
 aa2:	88 f0       	brcs	.+34     	; 0xac6 <__fixunssfsi+0x28>
 aa4:	9f 57       	subi	r25, 0x7F	; 127
 aa6:	98 f0       	brcs	.+38     	; 0xace <__fixunssfsi+0x30>
 aa8:	b9 2f       	mov	r27, r25
 aaa:	99 27       	eor	r25, r25
 aac:	b7 51       	subi	r27, 0x17	; 23
 aae:	b0 f0       	brcs	.+44     	; 0xadc <__fixunssfsi+0x3e>
 ab0:	e1 f0       	breq	.+56     	; 0xaea <__fixunssfsi+0x4c>
 ab2:	66 0f       	add	r22, r22
 ab4:	77 1f       	adc	r23, r23
 ab6:	88 1f       	adc	r24, r24
 ab8:	99 1f       	adc	r25, r25
 aba:	1a f0       	brmi	.+6      	; 0xac2 <__fixunssfsi+0x24>
 abc:	ba 95       	dec	r27
 abe:	c9 f7       	brne	.-14     	; 0xab2 <__fixunssfsi+0x14>
 ac0:	14 c0       	rjmp	.+40     	; 0xaea <__fixunssfsi+0x4c>
 ac2:	b1 30       	cpi	r27, 0x01	; 1
 ac4:	91 f0       	breq	.+36     	; 0xaea <__fixunssfsi+0x4c>
 ac6:	0e 94 05 06 	call	0xc0a	; 0xc0a <__fp_zero>
 aca:	b1 e0       	ldi	r27, 0x01	; 1
 acc:	08 95       	ret
 ace:	0c 94 05 06 	jmp	0xc0a	; 0xc0a <__fp_zero>
 ad2:	67 2f       	mov	r22, r23
 ad4:	78 2f       	mov	r23, r24
 ad6:	88 27       	eor	r24, r24
 ad8:	b8 5f       	subi	r27, 0xF8	; 248
 ada:	39 f0       	breq	.+14     	; 0xaea <__fixunssfsi+0x4c>
 adc:	b9 3f       	cpi	r27, 0xF9	; 249
 ade:	cc f3       	brlt	.-14     	; 0xad2 <__fixunssfsi+0x34>
 ae0:	86 95       	lsr	r24
 ae2:	77 95       	ror	r23
 ae4:	67 95       	ror	r22
 ae6:	b3 95       	inc	r27
 ae8:	d9 f7       	brne	.-10     	; 0xae0 <__fixunssfsi+0x42>
 aea:	3e f4       	brtc	.+14     	; 0xafa <__fixunssfsi+0x5c>
 aec:	90 95       	com	r25
 aee:	80 95       	com	r24
 af0:	70 95       	com	r23
 af2:	61 95       	neg	r22
 af4:	7f 4f       	sbci	r23, 0xFF	; 255
 af6:	8f 4f       	sbci	r24, 0xFF	; 255
 af8:	9f 4f       	sbci	r25, 0xFF	; 255
 afa:	08 95       	ret

00000afc <__floatunsisf>:
 afc:	e8 94       	clt
 afe:	09 c0       	rjmp	.+18     	; 0xb12 <__floatsisf+0x12>

00000b00 <__floatsisf>:
 b00:	97 fb       	bst	r25, 7
 b02:	3e f4       	brtc	.+14     	; 0xb12 <__floatsisf+0x12>
 b04:	90 95       	com	r25
 b06:	80 95       	com	r24
 b08:	70 95       	com	r23
 b0a:	61 95       	neg	r22
 b0c:	7f 4f       	sbci	r23, 0xFF	; 255
 b0e:	8f 4f       	sbci	r24, 0xFF	; 255
 b10:	9f 4f       	sbci	r25, 0xFF	; 255
 b12:	99 23       	and	r25, r25
 b14:	a9 f0       	breq	.+42     	; 0xb40 <__floatsisf+0x40>
 b16:	f9 2f       	mov	r31, r25
 b18:	96 e9       	ldi	r25, 0x96	; 150
 b1a:	bb 27       	eor	r27, r27
 b1c:	93 95       	inc	r25
 b1e:	f6 95       	lsr	r31
 b20:	87 95       	ror	r24
 b22:	77 95       	ror	r23
 b24:	67 95       	ror	r22
 b26:	b7 95       	ror	r27
 b28:	f1 11       	cpse	r31, r1
 b2a:	f8 cf       	rjmp	.-16     	; 0xb1c <__floatsisf+0x1c>
 b2c:	fa f4       	brpl	.+62     	; 0xb6c <__floatsisf+0x6c>
 b2e:	bb 0f       	add	r27, r27
 b30:	11 f4       	brne	.+4      	; 0xb36 <__floatsisf+0x36>
 b32:	60 ff       	sbrs	r22, 0
 b34:	1b c0       	rjmp	.+54     	; 0xb6c <__floatsisf+0x6c>
 b36:	6f 5f       	subi	r22, 0xFF	; 255
 b38:	7f 4f       	sbci	r23, 0xFF	; 255
 b3a:	8f 4f       	sbci	r24, 0xFF	; 255
 b3c:	9f 4f       	sbci	r25, 0xFF	; 255
 b3e:	16 c0       	rjmp	.+44     	; 0xb6c <__floatsisf+0x6c>
 b40:	88 23       	and	r24, r24
 b42:	11 f0       	breq	.+4      	; 0xb48 <__floatsisf+0x48>
 b44:	96 e9       	ldi	r25, 0x96	; 150
 b46:	11 c0       	rjmp	.+34     	; 0xb6a <__floatsisf+0x6a>
 b48:	77 23       	and	r23, r23
 b4a:	21 f0       	breq	.+8      	; 0xb54 <__floatsisf+0x54>
 b4c:	9e e8       	ldi	r25, 0x8E	; 142
 b4e:	87 2f       	mov	r24, r23
 b50:	76 2f       	mov	r23, r22
 b52:	05 c0       	rjmp	.+10     	; 0xb5e <__floatsisf+0x5e>
 b54:	66 23       	and	r22, r22
 b56:	71 f0       	breq	.+28     	; 0xb74 <__floatsisf+0x74>
 b58:	96 e8       	ldi	r25, 0x86	; 134
 b5a:	86 2f       	mov	r24, r22
 b5c:	70 e0       	ldi	r23, 0x00	; 0
 b5e:	60 e0       	ldi	r22, 0x00	; 0
 b60:	2a f0       	brmi	.+10     	; 0xb6c <__floatsisf+0x6c>
 b62:	9a 95       	dec	r25
 b64:	66 0f       	add	r22, r22
 b66:	77 1f       	adc	r23, r23
 b68:	88 1f       	adc	r24, r24
 b6a:	da f7       	brpl	.-10     	; 0xb62 <__floatsisf+0x62>
 b6c:	88 0f       	add	r24, r24
 b6e:	96 95       	lsr	r25
 b70:	87 95       	ror	r24
 b72:	97 f9       	bld	r25, 7
 b74:	08 95       	ret

00000b76 <__fp_inf>:
 b76:	97 f9       	bld	r25, 7
 b78:	9f 67       	ori	r25, 0x7F	; 127
 b7a:	80 e8       	ldi	r24, 0x80	; 128
 b7c:	70 e0       	ldi	r23, 0x00	; 0
 b7e:	60 e0       	ldi	r22, 0x00	; 0
 b80:	08 95       	ret

00000b82 <__fp_nan>:
 b82:	9f ef       	ldi	r25, 0xFF	; 255
 b84:	80 ec       	ldi	r24, 0xC0	; 192
 b86:	08 95       	ret

00000b88 <__fp_pscA>:
 b88:	00 24       	eor	r0, r0
 b8a:	0a 94       	dec	r0
 b8c:	16 16       	cp	r1, r22
 b8e:	17 06       	cpc	r1, r23
 b90:	18 06       	cpc	r1, r24
 b92:	09 06       	cpc	r0, r25
 b94:	08 95       	ret

00000b96 <__fp_pscB>:
 b96:	00 24       	eor	r0, r0
 b98:	0a 94       	dec	r0
 b9a:	12 16       	cp	r1, r18
 b9c:	13 06       	cpc	r1, r19
 b9e:	14 06       	cpc	r1, r20
 ba0:	05 06       	cpc	r0, r21
 ba2:	08 95       	ret

00000ba4 <__fp_round>:
 ba4:	09 2e       	mov	r0, r25
 ba6:	03 94       	inc	r0
 ba8:	00 0c       	add	r0, r0
 baa:	11 f4       	brne	.+4      	; 0xbb0 <__fp_round+0xc>
 bac:	88 23       	and	r24, r24
 bae:	52 f0       	brmi	.+20     	; 0xbc4 <__fp_round+0x20>
 bb0:	bb 0f       	add	r27, r27
 bb2:	40 f4       	brcc	.+16     	; 0xbc4 <__fp_round+0x20>
 bb4:	bf 2b       	or	r27, r31
 bb6:	11 f4       	brne	.+4      	; 0xbbc <__fp_round+0x18>
 bb8:	60 ff       	sbrs	r22, 0
 bba:	04 c0       	rjmp	.+8      	; 0xbc4 <__fp_round+0x20>
 bbc:	6f 5f       	subi	r22, 0xFF	; 255
 bbe:	7f 4f       	sbci	r23, 0xFF	; 255
 bc0:	8f 4f       	sbci	r24, 0xFF	; 255
 bc2:	9f 4f       	sbci	r25, 0xFF	; 255
 bc4:	08 95       	ret

00000bc6 <__fp_split3>:
 bc6:	57 fd       	sbrc	r21, 7
 bc8:	90 58       	subi	r25, 0x80	; 128
 bca:	44 0f       	add	r20, r20
 bcc:	55 1f       	adc	r21, r21
 bce:	59 f0       	breq	.+22     	; 0xbe6 <__fp_splitA+0x10>
 bd0:	5f 3f       	cpi	r21, 0xFF	; 255
 bd2:	71 f0       	breq	.+28     	; 0xbf0 <__fp_splitA+0x1a>
 bd4:	47 95       	ror	r20

00000bd6 <__fp_splitA>:
 bd6:	88 0f       	add	r24, r24
 bd8:	97 fb       	bst	r25, 7
 bda:	99 1f       	adc	r25, r25
 bdc:	61 f0       	breq	.+24     	; 0xbf6 <__fp_splitA+0x20>
 bde:	9f 3f       	cpi	r25, 0xFF	; 255
 be0:	79 f0       	breq	.+30     	; 0xc00 <__fp_splitA+0x2a>
 be2:	87 95       	ror	r24
 be4:	08 95       	ret
 be6:	12 16       	cp	r1, r18
 be8:	13 06       	cpc	r1, r19
 bea:	14 06       	cpc	r1, r20
 bec:	55 1f       	adc	r21, r21
 bee:	f2 cf       	rjmp	.-28     	; 0xbd4 <__fp_split3+0xe>
 bf0:	46 95       	lsr	r20
 bf2:	f1 df       	rcall	.-30     	; 0xbd6 <__fp_splitA>
 bf4:	08 c0       	rjmp	.+16     	; 0xc06 <__fp_splitA+0x30>
 bf6:	16 16       	cp	r1, r22
 bf8:	17 06       	cpc	r1, r23
 bfa:	18 06       	cpc	r1, r24
 bfc:	99 1f       	adc	r25, r25
 bfe:	f1 cf       	rjmp	.-30     	; 0xbe2 <__fp_splitA+0xc>
 c00:	86 95       	lsr	r24
 c02:	71 05       	cpc	r23, r1
 c04:	61 05       	cpc	r22, r1
 c06:	08 94       	sec
 c08:	08 95       	ret

00000c0a <__fp_zero>:
 c0a:	e8 94       	clt

00000c0c <__fp_szero>:
 c0c:	bb 27       	eor	r27, r27
 c0e:	66 27       	eor	r22, r22
 c10:	77 27       	eor	r23, r23
 c12:	cb 01       	movw	r24, r22
 c14:	97 f9       	bld	r25, 7
 c16:	08 95       	ret

00000c18 <_exit>:
 c18:	f8 94       	cli

00000c1a <__stop_program>:
 c1a:	ff cf       	rjmp	.-2      	; 0xc1a <__stop_program>
